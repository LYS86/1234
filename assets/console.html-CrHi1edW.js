import{_ as c,r as l,o as p,c as i,d as s,a as n,b as t,e as a}from"./app-ITaSz8sO.js";const u={},d=n("h1",{id:"控制台-console",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#控制台-console"},[n("span",null,"控制台-console")])],-1),r=a(`<p>控制台模块提供了一个和 Web 浏览器中相似的用于调试的控制台。用于输出一些调试信息、中间结果等。 console 模块中的一些函数也可以直接作为全局函数使用，例如 log, print 等。</p><h2 id="console-show-autohide" tabindex="-1"><a class="header-anchor" href="#console-show-autohide"><span>console.show(autoHide)</span></a></h2><ul><li><code>autoHide</code> {boolean}</li></ul><p>当程序结束的时候是否自动隐藏控制 显示控制台。这会显示一个控制台的悬浮窗(需要悬浮窗权限)。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//程序结束自动 隐藏控制台</span>
console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结束不会自动隐藏控制台</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-hide" tabindex="-1"><a class="header-anchor" href="#console-hide"><span>console.hide()</span></a></h2><p>隐藏控制台悬浮窗。</p><h2 id="console-clear" tabindex="-1"><a class="header-anchor" href="#console-clear"><span>console.clear()</span></a></h2><p>清空控制台。</p><h2 id="console-log-data-args" tabindex="-1"><a class="header-anchor" href="#console-log-data-args"><span>console.log(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul>`,11),k={href:"http://man7.org/linux/man-pages/man3/printf.3.html",target:"_blank",rel:"noopener noreferrer"},v=a(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;count: %d&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: count: 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;count:&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: count: 5 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>详见 util.format()。</p><p>该函数也可以作为全局函数使用。</p><h2 id="console-verbose-data-args" tabindex="-1"><a class="header-anchor" href="#console-verbose-data-args"><span>console.verbose(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以灰色字体显示。输出优先级低于 log，用于输出观察性质的信息。</p><h2 id="console-info-data-args" tabindex="-1"><a class="header-anchor" href="#console-info-data-args"><span>console.info(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以绿色字体显示。输出优先级高于 log, 用于输出重要信息。</p><h2 id="console-warn-data-args" tabindex="-1"><a class="header-anchor" href="#console-warn-data-args"><span>console.warn(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以蓝色字体显示。输出优先级高于 info, 用于输出警告信息。</p><h2 id="console-error-data-args" tabindex="-1"><a class="header-anchor" href="#console-error-data-args"><span>console.error(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，但输出结果以红色字体显示。输出优先级高于 warn, 用于输出错误信息。</p><h2 id="console-assert-value-message" tabindex="-1"><a class="header-anchor" href="#console-assert-value-message"><span>console.assert(value, message)</span></a></h2><ul><li><code>value</code> {any} 要断言的布尔值</li><li><code>message</code> {string} value 为 false 时要输出的信息</li></ul><p>断言。如果 value 为 false 则输出错误信息 message 并停止脚本运行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;加法出错啦&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-time-label-default" tabindex="-1"><a class="header-anchor" href="#console-time-label-default"><span>console.time([label=&#39;default&#39;])</span></a></h2>`,20),g=a('<ul><li><code>label</code> {String} 计时器标签，可省略</li></ul><p>启动一个计时器，用于计算一个操作的持续时间。 计时器由一个唯一的 <code>label</code> 标识。 若<code>label</code>重复，则会覆盖上一个同名<code>label</code>的计时器。<br> 以同名 <code>label</code>调用 <code>console.timeEnd()</code> 来停止计时器，并以毫秒为单位将持续时间输出到控制台。</p><h2 id="console-timeend-label-default" tabindex="-1"><a class="header-anchor" href="#console-timeend-label-default"><span>console.timeEnd([label=&#39;default&#39;])</span></a></h2>',3),m=a(`<ul><li><code>label</code> {String} 计时器标签</li></ul><p>停止并删除计时器，并打印结果到控制台。如果不存在标签指定的计时器则会打印 <code>NaNms</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;求和&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;求和&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印 求和: xxx ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-trace-data-args" tabindex="-1"><a class="header-anchor" href="#console-trace-data-args"><span>console.trace(data,[...args])</span></a></h2>`,4),h=a(`<ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 类似，同时会打印出调用这个函数所在的调用栈信息（即当前运行的文件、行数等信息）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;Show me&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: (堆栈跟踪会根据被调用的跟踪的位置而变化)</span>
<span class="token comment">// Show me</span>
<span class="token comment">//  at &lt;test&gt;:7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-input-data-args" tabindex="-1"><a class="header-anchor" href="#console-input-data-args"><span>console.input(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与<code>console.log</code>一样输出信息，并在控制台显示输入框等待输入。按控制台的确认按钮后会将输入的字符串用<code>eval</code>计算后返回。</p><p><strong>部分机型可能会有控制台不显示输入框的情况，属于 bug。</strong></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；
<span class="token keyword">var</span> n <span class="token operator">=</span> console<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输入123</span>
<span class="token function">toast</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//显示124</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-rawinput-data-args" tabindex="-1"><a class="header-anchor" href="#console-rawinput-data-args"><span>console.rawInput(data,[...args])</span></a></h2><ul><li><code>data</code> {any}</li><li><code>...args</code> {any}</li></ul><p>与 console.log 一样输出信息，并在控制台显示输入框等待输入。按控制台的确认按钮后会将输入的字符串直接返回。</p><p><strong>部分机型可能会有控制台不显示输入框的情况，属于 bug。</strong></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；
<span class="token keyword">var</span> n <span class="token operator">=</span> console<span class="token punctuation">.</span><span class="token function">rawInput</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输入123</span>
<span class="token function">toast</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//显示1231</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setsize-w-h" tabindex="-1"><a class="header-anchor" href="#console-setsize-w-h"><span>console.setSize(w, h)</span></a></h2><ul><li><code>w</code> {number} 宽度</li><li><code>h</code> {number} 高度</li></ul><p>设置控制台的大小，单位像素。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置控制台大小为屏幕的四分之一</span>
console<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>device<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> device<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setposition-x-y" tabindex="-1"><a class="header-anchor" href="#console-setposition-x-y"><span>console.setPosition(x, y)</span></a></h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li></ul><p>设置控制台的位置，单位像素。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setgloballogconfig-config" tabindex="-1"><a class="header-anchor" href="#console-setgloballogconfig-config"><span>console.setGlobalLogConfig(config)</span></a></h2>`,24),b=n("code",null,"config",-1),f=n("li",null,[n("code",null,"file"),t(" {string} 日志文件路径，将会把日志写入该文件中")],-1),x=n("li",null,[n("code",null,"maxFileSize"),t(" {number} 最大文件大小，单位字节，默认为 512 * 1024 (512KB)")],-1),j=n("li",null,[n("code",null,"rootLevel"),t(' {string} 写入的日志级别，默认为"ALL"（所有日志），可以为"OFF"(关闭), "DEBUG", "INFO", "WARN", "ERROR", "FATAL"等。')],-1),_=n("li",null,[n("code",null,"maxBackupSize"),t(" {number} 日志备份文件最大数量，默认为 5")],-1),y=n("code",null,"filePattern",-1),w={href:"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>设置日志保存的路径和配置。例如把日志保存到&quot;/sdcard/1.txt&quot;:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">setGlobalLogConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="print-text" tabindex="-1"><a class="header-anchor" href="#print-text"><span>print(text)</span></a></h2><ul><li><code>text</code> {string} | {Object} 要打印到控制台的信息</li></ul><p>相当于<code>log(text)</code>。</p><h2 id="console-settitle-title-color-size" tabindex="-1"><a class="header-anchor" href="#console-settitle-title-color-size"><span>console.setTitle(title,color,size)</span></a></h2>`,6),z=a(`<ul><li><code>title</code> {string} 标题</li><li><code>color</code> {string} 颜色值 #AARRGGBB</li><li><code>size</code> {number} 标题高度，字号会随高度变化，单位是 dp</li></ul><p>设置标题名称，字体颜色，标题栏高度</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#ff11ee00&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#ff11ee00&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setlogsize-size" tabindex="-1"><a class="header-anchor" href="#console-setlogsize-size"><span>console.setLogSize(size)</span></a></h2>`,4),L=a(`<ul><li><code>size</code> {number} 字号大小，单位是 dp 或 sp 20 以内比较合适</li></ul><p>设置 log 字号大小。 <strong>需要在显示控制台之后才能设置，否则空指针</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myrandom</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

threads<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;中文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#ff11ee00&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">setCanInput</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">setLogSize</span><span class="token punctuation">(</span><span class="token function">myrandom</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">setCanInput</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;i-----&gt;&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="console-setcaninput-can" tabindex="-1"><a class="header-anchor" href="#console-setcaninput-can"><span>console.setCanInput(can)</span></a></h2>`,4),B=a(`<ul><li><code>can</code> {boolean} true 或 false 可以输入或不可以输入</li></ul><p>控制 console 是否可以输入文字</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">setCanInput</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="console-setbackgroud-color" tabindex="-1"><a class="header-anchor" href="#console-setbackgroud-color"><span>console.setBackgroud(color)</span></a></h2>`,4),S=a(`<ul><li><code>color</code> {string} 颜色值 #AARRGGBB</li></ul><p>设置 console 背景色,<strong>需要在显示控制台之后才能设置，否则空指针</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">setBackgroud</span><span class="token punctuation">(</span><span class="token string">&quot;#33ef0000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="console-setmaxlines-maxlines" tabindex="-1"><a class="header-anchor" href="#console-setmaxlines-maxlines"><span>console.setMaxLines(maxLines)</span></a></h2>`,4),I=a(`<ul><li><code>maxLines</code> {number} 最大行数</li></ul><p>设置 console 显示最大行数，默认-1，不限 ，超出行数系统会清空，从 0 开始显示 不限制，显示列表过长，android 内存又不足，系统会回收 console 的引用，即 console 将不显示。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="console-setbackground" tabindex="-1"><a class="header-anchor" href="#console-setbackground"><span>console.setBackground()</span></a></h2>`,4);function C(N,E){const e=l("Badge"),o=l("ExternalLinkIcon");return p(),i("div",null,[d,s(e,{type:"tip",text:"稳定",vertical:"middle"}),r,n("p",null,[t("打印到控制台，并带上换行符。 可以传入多个参数，第一个参数作为主要信息，其他参数作为类似于 "),n("a",k,[t("printf(3)"),s(o)]),t(" 中的代替值（参数都会传给 util.format()）。")]),v,s(e,{type:"tip",text:"v4.1.0+",vertical:"middle"}),g,s(e,{type:"tip",text:"v4.1.0+",vertical:"middle"}),m,s(e,{type:"tip",text:"v4.1.0+",vertical:"middle"}),h,s(e,{type:"tip",text:"v4.1.0+",vertical:"middle"}),n("ul",null,[n("li",null,[b,t(" {Object} 日志配置，可选的项有： "),n("ul",null,[f,x,j,_,n("li",null,[y,t(" {string} 日志写入格式，参见"),n("a",w,[t("PatternLayout"),s(o)])])])])]),q,s(e,{type:"tip",text:"v4.2.5+",vertical:"middle"}),z,s(e,{type:"tip",text:"v4.2.5+",vertical:"middle"}),L,s(e,{type:"tip",text:"v4.2.5+",vertical:"middle"}),B,s(e,{type:"tip",text:"v4.2.5+",vertical:"middle"}),S,s(e,{type:"tip",text:"v5.0.2+",vertical:"middle"}),I])}const T=c(u,[["render",C],["__file","console.html.vue"]]),A=JSON.parse(`{"path":"/console.html","title":"控制台-console","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"console.show(autoHide)","slug":"console-show-autohide","link":"#console-show-autohide","children":[]},{"level":2,"title":"console.hide()","slug":"console-hide","link":"#console-hide","children":[]},{"level":2,"title":"console.clear()","slug":"console-clear","link":"#console-clear","children":[]},{"level":2,"title":"console.log(data,[...args])","slug":"console-log-data-args","link":"#console-log-data-args","children":[]},{"level":2,"title":"console.verbose(data,[...args])","slug":"console-verbose-data-args","link":"#console-verbose-data-args","children":[]},{"level":2,"title":"console.info(data,[...args])","slug":"console-info-data-args","link":"#console-info-data-args","children":[]},{"level":2,"title":"console.warn(data,[...args])","slug":"console-warn-data-args","link":"#console-warn-data-args","children":[]},{"level":2,"title":"console.error(data,[...args])","slug":"console-error-data-args","link":"#console-error-data-args","children":[]},{"level":2,"title":"console.assert(value, message)","slug":"console-assert-value-message","link":"#console-assert-value-message","children":[]},{"level":2,"title":"console.time([label='default'])","slug":"console-time-label-default","link":"#console-time-label-default","children":[]},{"level":2,"title":"console.timeEnd([label='default'])","slug":"console-timeend-label-default","link":"#console-timeend-label-default","children":[]},{"level":2,"title":"console.trace(data,[...args])","slug":"console-trace-data-args","link":"#console-trace-data-args","children":[]},{"level":2,"title":"console.input(data,[...args])","slug":"console-input-data-args","link":"#console-input-data-args","children":[]},{"level":2,"title":"console.rawInput(data,[...args])","slug":"console-rawinput-data-args","link":"#console-rawinput-data-args","children":[]},{"level":2,"title":"console.setSize(w, h)","slug":"console-setsize-w-h","link":"#console-setsize-w-h","children":[]},{"level":2,"title":"console.setPosition(x, y)","slug":"console-setposition-x-y","link":"#console-setposition-x-y","children":[]},{"level":2,"title":"console.setGlobalLogConfig(config)","slug":"console-setgloballogconfig-config","link":"#console-setgloballogconfig-config","children":[]},{"level":2,"title":"print(text)","slug":"print-text","link":"#print-text","children":[]},{"level":2,"title":"console.setTitle(title,color,size)","slug":"console-settitle-title-color-size","link":"#console-settitle-title-color-size","children":[]},{"level":2,"title":"console.setLogSize(size)","slug":"console-setlogsize-size","link":"#console-setlogsize-size","children":[]},{"level":2,"title":"console.setCanInput(can)","slug":"console-setcaninput-can","link":"#console-setcaninput-can","children":[]},{"level":2,"title":"console.setBackgroud(color)","slug":"console-setbackgroud-color","link":"#console-setbackgroud-color","children":[]},{"level":2,"title":"console.setMaxLines(maxLines)","slug":"console-setmaxlines-maxlines","link":"#console-setmaxlines-maxlines","children":[]},{"level":2,"title":"console.setBackground()","slug":"console-setbackground","link":"#console-setbackground","children":[]}],"git":{"updatedTime":1713029763000,"contributors":[{"name":"Lin","email":"yditmxpev@mozmail.com","commits":1}]},"filePathRelative":"console.md"}`);export{T as comp,A as data};
