import{_ as l,r as i,o as u,c as d,a as n,b as s,d as a,w as o,e}from"./app-CJv-W2Gj.js";const r={},k={id:"util",tabindex:"-1"},m={class:"header-anchor",href:"#util"},v=e(`<blockquote><p>稳定性: 稳定</p></blockquote><p>The <code>util</code> module is primarily designed to support the needs of Node.js&#39; own internal APIs. However, many of the utilities are useful for application and module developers as well. It can be accessed using:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="util-callbackify-original" tabindex="-1"><a class="header-anchor" href="#util-callbackify-original"><span>util.callbackify(original)</span></a></h2><ul><li><code>original</code> {Function} An <code>async</code> function</li><li>Returns: {Function} a callback style function</li></ul><p>Takes an <code>async</code> function (or a function that returns a Promise) and returns a function following the Node.js error first callback style. In the callback, the first argument will be the rejection reason (or <code>null</code> if the Promise resolved), and the second argument will be the resolved value.</p><p>For example:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> callbackFunction <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">callbackify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Will print:</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>hello world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>Note</em>:</p>`,11),b=n("code",null,"'uncaughtException'",-1),h=e(`<li><p>Since <code>null</code> has a special meaning as the first argument to a callback, if a wrapped function rejects a <code>Promise</code> with a falsy value as a reason, the value is wrapped in an <code>Error</code> with the original value stored in a field named <code>reason</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> callbackFunction <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">callbackify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">callbackFunction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// When the Promise was rejected with \`null\` it is wrapped with an Error and</span>
  <span class="token comment">// the original value is stored in \`reason\`.</span>
  err <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;reason&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> err<span class="token punctuation">.</span>reason <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),g=n("h2",{id:"util-debuglog-section",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-debuglog-section"},[n("span",null,"util.debuglog(section)")])],-1),f=n("ul",null,[n("li",null,[n("code",null,"section"),s(" {string} A string identifying the portion of the application for which the "),n("code",null,"debuglog"),s(" function is being created.")]),n("li",null,"Returns: {Function} The logging function")],-1),y=n("code",null,"util.debuglog()",-1),j=n("code",null,"stderr",-1),w=n("code",null,"NODE_DEBUG",-1),_=n("code",null,"section",-1),x=n("code",null,"console.error()",-1),q=e(`<p>For example:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> debuglog <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">debuglog</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">debuglog</span><span class="token punctuation">(</span><span class="token string">&quot;hello from foo [%d]&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If this program is run with <code>NODE_DEBUG=foo</code> in the environment, then it will output something like:</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>FOO 3245: hello from foo [123]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>where <code>3245</code> is the process id. If it is not run with that environment variable set, then it will not print anything.</p><p>Multiple comma-separated <code>section</code> names may be specified in the <code>NODE_DEBUG</code> environment variable. For example: <code>NODE_DEBUG=fs,net,tls</code>.</p><h2 id="util-deprecate-function-string" tabindex="-1"><a class="header-anchor" href="#util-deprecate-function-string"><span>util.deprecate(function, string)</span></a></h2><p>The <code>util.deprecate()</code> method wraps the given <code>function</code> or class in such a way that it is marked as deprecated.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>puts <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;util.puts: Use console.log instead&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When called, <code>util.deprecate()</code> will return a function that will emit a <code>DeprecationWarning</code> using the <code>process.on(&#39;warning&#39;)</code> event. By default, this warning will be emitted and printed to <code>stderr</code> exactly once, the first time it is called. After the warning is emitted, the wrapped <code>function</code> is called.</p><p>If either the <code>--no-deprecation</code> or <code>--no-warnings</code> command line flags are used, or if the <code>process.noDeprecation</code> property is set to <code>true</code> <em>prior</em> to the first deprecation warning, the <code>util.deprecate()</code> method does nothing.</p><p>If the <code>--trace-deprecation</code> or <code>--trace-warnings</code> command line flags are set, or the <code>process.traceDeprecation</code> property is set to <code>true</code>, a warning and a stack trace are printed to <code>stderr</code> the first time the deprecated function is called.</p><p>If the <code>--throw-deprecation</code> command line flag is set, or the <code>process.throwDeprecation</code> property is set to <code>true</code>, then an exception will be thrown when the deprecated function is called.</p><p>The <code>--throw-deprecation</code> command line flag and <code>process.throwDeprecation</code> property take precedence over <code>--trace-deprecation</code> and <code>process.traceDeprecation</code>.</p><h2 id="util-format-format-args" tabindex="-1"><a class="header-anchor" href="#util-format-format-args"><span>util.format(format[, ...args])</span></a></h2><ul><li><code>format</code> {string} A <code>printf</code>-like format string.</li></ul><p>The <code>util.format()</code> method returns a formatted string using the first argument as a <code>printf</code>-like format.</p><p>The first argument is a string containing zero or more <em>placeholder</em> tokens. Each placeholder token is replaced with the converted value from the corresponding argument. Supported placeholders are:</p><ul><li><code>%s</code> - String.</li><li><code>%d</code> - Number (integer or floating point value).</li><li><code>%i</code> - Integer.</li><li><code>%f</code> - Floating point value.</li><li><code>%j</code> - JSON. Replaced with the string <code>&#39;[Circular]&#39;</code> if the argument contains circular references.</li><li><code>%o</code> - Object. A string representation of an object with generic JavaScript object formatting. Similar to <code>util.inspect()</code> with options <code>{ showHidden: true, depth: 4, showProxy: true }</code>. This will show the full object including non-enumerable symbols and properties.</li><li><code>%O</code> - Object. A string representation of an object with generic JavaScript object formatting. Similar to <code>util.inspect()</code> without options. This will show the full object not including non-enumerable symbols and properties.</li><li><code>%%</code> - single percent sign (<code>&#39;%&#39;</code>). This does not consume an argument.</li></ul><p>If the placeholder does not have a corresponding argument, the placeholder is not replaced.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &#39;foo:%s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If there are more arguments passed to the <code>util.format()</code> method than the number of placeholders, the extra arguments are coerced into strings then concatenated to the returned string, each delimited by a space. Excessive arguments whose <code>typeof</code> is <code>&#39;object&#39;</code> or <code>&#39;symbol&#39;</code> (except <code>null</code>) will be transformed by <code>util.inspect()</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo:bar baz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If the first argument is not a string then <code>util.format()</code> returns a string that is the concatenation of all arguments separated by spaces. Each argument is converted to a string using <code>util.inspect()</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1 2 3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If only one argument is passed to <code>util.format()</code>, it is returned as it is without any formatting.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>util<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%% %s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;%% %s&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="util-inherits-constructor-superconstructor" tabindex="-1"><a class="header-anchor" href="#util-inherits-constructor-superconstructor"><span>util.inherits(constructor, superConstructor)</span></a></h2>`,28),R=n("em",null,"Note",-1),E=n("code",null,"util.inherits()",-1),T=n("code",null,"class",-1),D=n("code",null,"extends",-1),S={href:"https://github.com/nodejs/node/issues/4179",target:"_blank",rel:"noopener noreferrer"},O=n("ul",null,[n("li",null,[n("code",null,"constructor"),s(" {Function}")]),n("li",null,[n("code",null,"superConstructor"),s(" {Function}")])],-1),A={href:"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"constructor",-1),N=n("code",null,"superConstructor",-1),B=e(`<p>As an additional convenience, <code>superConstructor</code> will be accessible through the <code>constructor.super_</code> property.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">EventEmitter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

util<span class="token punctuation">.</span><span class="token function">inherits</span><span class="token punctuation">(</span>MyStream<span class="token punctuation">,</span> EventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">MyStream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream <span class="token keyword">instanceof</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyStream<span class="token punctuation">.</span>super_ <span class="token operator">===</span> EventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received data: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;It works!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Received data: &quot;It works!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 example using <code>class</code> and <code>extends</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;events&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyStream</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>
  <span class="token function">write</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received data: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;With ES6&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-inspect-object-options" tabindex="-1"><a class="header-anchor" href="#util-inspect-object-options"><span>util.inspect(object[, options])</span></a></h2><ul><li><code>object</code> {any} Any JavaScript primitive or Object.</li><li><code>options</code> {Object} <ul><li><code>showHidden</code> {boolean} If <code>true</code>, the <code>object</code>&#39;s non-enumerable symbols and properties will be included in the formatted result. Defaults to <code>false</code>.</li><li><code>depth</code> {number} Specifies the number of times to recurse while formatting the <code>object</code>. This is useful for inspecting large complicated objects. Defaults to <code>2</code>. To make it recurse indefinitely pass <code>null</code>.</li><li><code>colors</code> {boolean} If <code>true</code>, the output will be styled with ANSI color codes. Defaults to <code>false</code>. Colors are customizable, see <a href="#util_customizing_util_inspect_colors">Customizing <code>util.inspect</code> colors</a>.</li><li><code>customInspect</code> {boolean} If <code>false</code>, then custom <code>inspect(depth, opts)</code> functions exported on the <code>object</code> being inspected will not be called. Defaults to <code>true</code>.</li><li><code>showProxy</code> {boolean} If <code>true</code>, then objects and functions that are <code>Proxy</code> objects will be introspected to show their <code>target</code> and <code>handler</code> objects. Defaults to <code>false</code>.</li><li><code>maxArrayLength</code> {number} Specifies the maximum number of array and <code>TypedArray</code> elements to include when formatting. Defaults to <code>100</code>. Set to <code>null</code> to show all array elements. Set to <code>0</code> or negative to show no array elements.</li><li><code>breakLength</code> {number} The length at which an object&#39;s keys are split across multiple lines. Set to <code>Infinity</code> to format an object as a single line. Defaults to 60 for legacy compatibility.</li></ul></li></ul><p>The <code>util.inspect()</code> method returns a string representation of <code>object</code> that is primarily useful for debugging. Additional <code>options</code> may be passed that alter certain aspects of the formatted string.</p><p>The following example inspects all properties of the <code>util</code> object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>util<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">showHidden</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Values may supply their own custom <code>inspect(depth, opts)</code> functions, when called these receive the current <code>depth</code> in the recursive inspection, as well as the options object passed to <code>util.inspect()</code>.</p><h3 id="customizing-util-inspect-colors" tabindex="-1"><a class="header-anchor" href="#customizing-util-inspect-colors"><span>Customizing <code>util.inspect</code> colors</span></a></h3><p>Color output (if enabled) of <code>util.inspect</code> is customizable globally via the <code>util.inspect.styles</code> and <code>util.inspect.colors</code> properties.</p><p><code>util.inspect.styles</code> is a map associating a style name to a color from <code>util.inspect.colors</code>.</p><p>The default styles and associated colors are:</p><ul><li><code>number</code> - <code>yellow</code></li><li><code>boolean</code> - <code>yellow</code></li><li><code>string</code> - <code>green</code></li><li><code>date</code> - <code>magenta</code></li><li><code>regexp</code> - <code>red</code></li><li><code>null</code> - <code>bold</code></li><li><code>undefined</code> - <code>grey</code></li><li><code>special</code> - <code>cyan</code> (only applied to functions at this time)</li><li><code>name</code> - (no styling)</li></ul><p>The predefined color codes are: <code>white</code>, <code>grey</code>, <code>black</code>, <code>blue</code>, <code>cyan</code>, <code>green</code>, <code>magenta</code>, <code>red</code> and <code>yellow</code>. There are also <code>bold</code>, <code>italic</code>, <code>underline</code> and <code>inverse</code> codes.</p><p>Color styling uses ANSI control codes that may not be supported on all terminals.</p><h3 id="custom-inspection-functions-on-objects" tabindex="-1"><a class="header-anchor" href="#custom-inspection-functions-on-objects"><span>Custom inspection functions on Objects</span></a></h3><p>Objects may also define their own <code>[util.inspect.custom](depth, opts)</code> (or, equivalently <code>inspect(depth, opts)</code>) function that <code>util.inspect()</code> will invoke and use the result of when inspecting the object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">inspect</span><span class="token punctuation">(</span><span class="token parameter">depth<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> options<span class="token punctuation">.</span><span class="token function">stylize</span><span class="token punctuation">(</span><span class="token string">&quot;[Box]&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;special&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> newOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">depth</span><span class="token operator">:</span> options<span class="token punctuation">.</span>depth <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Five space padding because that&#39;s the size of &quot;Box&lt; &quot;.</span>
    <span class="token keyword">const</span> padding <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> inner <span class="token operator">=</span> util
      <span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> newOptions<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>padding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>options<span class="token punctuation">.</span><span class="token function">stylize</span><span class="token punctuation">(</span><span class="token string">&quot;Box&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;special&quot;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>inner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> &gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &quot;Box&lt; true &gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Custom <code>[util.inspect.custom](depth, opts)</code> functions typically return a string but may return a value of any type that will be formatted accordingly by <code>util.inspect()</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;this will not show up in the inspect() output&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span>util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>custom<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">depth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &quot;{ bar: &#39;baz&#39; }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A custom inspection method can alternatively be provided by exposing an <code>inspect(depth, opts)</code> method on the object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&quot;this will not show up in the inspect() output&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function-variable function">inspect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">depth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&quot;baz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: &quot;{ bar: &#39;baz&#39; }&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-inspect-custom" tabindex="-1"><a class="header-anchor" href="#util-inspect-custom"><span>util.inspect.custom</span></a></h3><p>A Symbol that can be used to declare custom inspect functions, see <a href="#util_custom_inspection_functions_on_objects">Custom inspection functions on Objects</a>.</p><h3 id="util-inspect-defaultoptions" tabindex="-1"><a class="header-anchor" href="#util-inspect-defaultoptions"><span>util.inspect.defaultOptions</span></a></h3><p>The <code>defaultOptions</code> value allows customization of the default options used by <code>util.inspect</code>. This is useful for functions like <code>console.log</code> or <code>util.format</code> which implicitly call into <code>util.inspect</code>. It shall be set to an object containing one or more valid <a href="#util_util_inspect_object_options"><code>util.inspect()</code></a> options. Setting option properties directly is also supported.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs the truncated array</span>
util<span class="token punctuation">.</span>inspect<span class="token punctuation">.</span>defaultOptions<span class="token punctuation">.</span>maxArrayLength <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs the full array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="util-promisify-original" tabindex="-1"><a class="header-anchor" href="#util-promisify-original"><span>util.promisify(original)</span></a></h2><ul><li><code>original</code> {Function}</li></ul><p>Takes a function following the common Node.js callback style, i.e. taking a <code>(err, value) =&gt; ...</code> callback as the last argument, and returns a version that returns promises.</p><p>For example:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stat <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stats</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Do something with \`stats\`</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Handle the error.</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, equivalently using <code>async function</code>s:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stat <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">callStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This directory is owned by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>stats<span class="token punctuation">.</span>uid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If there is an <code>original[util.promisify.custom]</code> property present, <code>promisify</code> will return its value, see <a href="#util_custom_promisified_functions">Custom promisified functions</a>.</p><p><code>promisify()</code> assumes that <code>original</code> is a function taking a callback as its final argument in all cases, and the returned function will result in undefined behavior if it does not.</p><h3 id="custom-promisified-functions" tabindex="-1"><a class="header-anchor" href="#custom-promisified-functions"><span>Custom promisified functions</span></a></h3><p>Using the <code>util.promisify.custom</code> symbol one can override the return value of <a href="#util_util_promisify_original"><code>util.promisify()</code></a>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">foo<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

doSomething<span class="token punctuation">[</span>util<span class="token punctuation">.</span>promisify<span class="token punctuation">.</span>custom<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getPromiseSomehow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> promisified <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promisified <span class="token operator">===</span> doSomething<span class="token punctuation">[</span>util<span class="token punctuation">.</span>promisify<span class="token punctuation">.</span>custom<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// prints &#39;true&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can be useful for cases where the original function does not follow the standard format of taking an error-first callback as the last argument.</p><h3 id="util-promisify-custom" tabindex="-1"><a class="header-anchor" href="#util-promisify-custom"><span>util.promisify.custom</span></a></h3><ul><li>{symbol}</li></ul><p>A Symbol that can be used to declare custom promisified variants of functions, see <a href="#util_custom_promisified_functions">Custom promisified functions</a>.</p><h2 id="class-util-textdecoder" tabindex="-1"><a class="header-anchor" href="#class-util-textdecoder"><span>Class: util.TextDecoder</span></a></h2><blockquote><p>稳定性: 实验</p></blockquote>`,47),U={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"TextDecoder",-1),P=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextDecoder</span><span class="token punctuation">(</span><span class="token string">&quot;shift_jis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> buffer<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buffer <span class="token operator">=</span> <span class="token function">getNextChunkSomehow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  string <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stream</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
string <span class="token operator">+=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// end-of-stream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="whatwg-supported-encodings" tabindex="-1"><a class="header-anchor" href="#whatwg-supported-encodings"><span>WHATWG Supported Encodings</span></a></h3>`,2),F={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"TextDecoder",-1),W=e('<h4 id="encodings-supported-without-icu" tabindex="-1"><a class="header-anchor" href="#encodings-supported-without-icu"><span>Encodings Supported Without ICU</span></a></h4><table><thead><tr><th>Encoding</th><th>Aliases</th></tr></thead><tbody><tr><td><code>&#39;utf-8&#39;</code></td><td><code>&#39;unicode-1-1-utf-8&#39;</code>, <code>&#39;utf8&#39;</code></td></tr><tr><td><code>&#39;utf-16le&#39;</code></td><td><code>&#39;utf-16&#39;</code></td></tr></tbody></table><h4 id="encodings-supported-by-default-with-icu" tabindex="-1"><a class="header-anchor" href="#encodings-supported-by-default-with-icu"><span>Encodings Supported by Default (With ICU)</span></a></h4><table><thead><tr><th>Encoding</th><th>Aliases</th></tr></thead><tbody><tr><td><code>&#39;utf-8&#39;</code></td><td><code>&#39;unicode-1-1-utf-8&#39;</code>, <code>&#39;utf8&#39;</code></td></tr><tr><td><code>&#39;utf-16le&#39;</code></td><td><code>&#39;utf-16&#39;</code></td></tr><tr><td><code>&#39;utf-16be&#39;</code></td><td></td></tr></tbody></table><h4 id="encodings-requiring-full-icu-data" tabindex="-1"><a class="header-anchor" href="#encodings-requiring-full-icu-data"><span>Encodings Requiring Full ICU Data</span></a></h4><table><thead><tr><th>Encoding</th><th>Aliases</th></tr></thead><tbody><tr><td><code>&#39;ibm866&#39;</code></td><td><code>&#39;866&#39;</code>, <code>&#39;cp866&#39;</code>, <code>&#39;csibm866&#39;</code></td></tr><tr><td><code>&#39;iso-8859-2&#39;</code></td><td><code>&#39;csisolatin2&#39;</code>, <code>&#39;iso-ir-101&#39;</code>, <code>&#39;iso8859-2&#39;</code>, <code>&#39;iso88592&#39;</code>, <code>&#39;iso_8859-2&#39;</code>, <code>&#39;iso_8859-2:1987&#39;</code>, <code>&#39;l2&#39;</code>, <code>&#39;latin2&#39;</code></td></tr><tr><td><code>&#39;iso-8859-3&#39;</code></td><td><code>&#39;csisolatin3&#39;</code>, <code>&#39;iso-ir-109&#39;</code>, <code>&#39;iso8859-3&#39;</code>, <code>&#39;iso88593&#39;</code>, <code>&#39;iso_8859-3&#39;</code>, <code>&#39;iso_8859-3:1988&#39;</code>, <code>&#39;l3&#39;</code>, <code>&#39;latin3&#39;</code></td></tr><tr><td><code>&#39;iso-8859-4&#39;</code></td><td><code>&#39;csisolatin4&#39;</code>, <code>&#39;iso-ir-110&#39;</code>, <code>&#39;iso8859-4&#39;</code>, <code>&#39;iso88594&#39;</code>, <code>&#39;iso_8859-4&#39;</code>, <code>&#39;iso_8859-4:1988&#39;</code>, <code>&#39;l4&#39;</code>, <code>&#39;latin4&#39;</code></td></tr><tr><td><code>&#39;iso-8859-5&#39;</code></td><td><code>&#39;csisolatincyrillic&#39;</code>, <code>&#39;cyrillic&#39;</code>, <code>&#39;iso-ir-144&#39;</code>, <code>&#39;iso8859-5&#39;</code>, <code>&#39;iso88595&#39;</code>, <code>&#39;iso_8859-5&#39;</code>, <code>&#39;iso_8859-5:1988&#39;</code></td></tr><tr><td><code>&#39;iso-8859-6&#39;</code></td><td><code>&#39;arabic&#39;</code>, <code>&#39;asmo-708&#39;</code>, <code>&#39;csiso88596e&#39;</code>, <code>&#39;csiso88596i&#39;</code>, <code>&#39;csisolatinarabic&#39;</code>, <code>&#39;ecma-114&#39;</code>, <code>&#39;iso-8859-6-e&#39;</code>, <code>&#39;iso-8859-6-i&#39;</code>, <code>&#39;iso-ir-127&#39;</code>, <code>&#39;iso8859-6&#39;</code>, <code>&#39;iso88596&#39;</code>, <code>&#39;iso_8859-6&#39;</code>, <code>&#39;iso_8859-6:1987&#39;</code></td></tr><tr><td><code>&#39;iso-8859-7&#39;</code></td><td><code>&#39;csisolatingreek&#39;</code>, <code>&#39;ecma-118&#39;</code>, <code>&#39;elot_928&#39;</code>, <code>&#39;greek&#39;</code>, <code>&#39;greek8&#39;</code>, <code>&#39;iso-ir-126&#39;</code>, <code>&#39;iso8859-7&#39;</code>, <code>&#39;iso88597&#39;</code>, <code>&#39;iso_8859-7&#39;</code>, <code>&#39;iso_8859-7:1987&#39;</code>, <code>&#39;sun_eu_greek&#39;</code></td></tr><tr><td><code>&#39;iso-8859-8&#39;</code></td><td><code>&#39;csiso88598e&#39;</code>, <code>&#39;csisolatinhebrew&#39;</code>, <code>&#39;hebrew&#39;</code>, <code>&#39;iso-8859-8-e&#39;</code>, <code>&#39;iso-ir-138&#39;</code>, <code>&#39;iso8859-8&#39;</code>, <code>&#39;iso88598&#39;</code>, <code>&#39;iso_8859-8&#39;</code>, <code>&#39;iso_8859-8:1988&#39;</code>, <code>&#39;visual&#39;</code></td></tr><tr><td><code>&#39;iso-8859-8-i&#39;</code></td><td><code>&#39;csiso88598i&#39;</code>, <code>&#39;logical&#39;</code></td></tr><tr><td><code>&#39;iso-8859-10&#39;</code></td><td><code>&#39;csisolatin6&#39;</code>, <code>&#39;iso-ir-157&#39;</code>, <code>&#39;iso8859-10&#39;</code>, <code>&#39;iso885910&#39;</code>, <code>&#39;l6&#39;</code>, <code>&#39;latin6&#39;</code></td></tr><tr><td><code>&#39;iso-8859-13&#39;</code></td><td><code>&#39;iso8859-13&#39;</code>, <code>&#39;iso885913&#39;</code></td></tr><tr><td><code>&#39;iso-8859-14&#39;</code></td><td><code>&#39;iso8859-14&#39;</code>, <code>&#39;iso885914&#39;</code></td></tr><tr><td><code>&#39;iso-8859-15&#39;</code></td><td><code>&#39;csisolatin9&#39;</code>, <code>&#39;iso8859-15&#39;</code>, <code>&#39;iso885915&#39;</code>, <code>&#39;iso_8859-15&#39;</code>, <code>&#39;l9&#39;</code></td></tr><tr><td><code>&#39;koi8-r&#39;</code></td><td><code>&#39;cskoi8r&#39;</code>, <code>&#39;koi&#39;</code>, <code>&#39;koi8&#39;</code>, <code>&#39;koi8_r&#39;</code></td></tr><tr><td><code>&#39;koi8-u&#39;</code></td><td><code>&#39;koi8-ru&#39;</code></td></tr><tr><td><code>&#39;macintosh&#39;</code></td><td><code>&#39;csmacintosh&#39;</code>, <code>&#39;mac&#39;</code>, <code>&#39;x-mac-roman&#39;</code></td></tr><tr><td><code>&#39;windows-874&#39;</code></td><td><code>&#39;dos-874&#39;</code>, <code>&#39;iso-8859-11&#39;</code>, <code>&#39;iso8859-11&#39;</code>, <code>&#39;iso885911&#39;</code>, <code>&#39;tis-620&#39;</code></td></tr><tr><td><code>&#39;windows-1250&#39;</code></td><td><code>&#39;cp1250&#39;</code>, <code>&#39;x-cp1250&#39;</code></td></tr><tr><td><code>&#39;windows-1251&#39;</code></td><td><code>&#39;cp1251&#39;</code>, <code>&#39;x-cp1251&#39;</code></td></tr><tr><td><code>&#39;windows-1252&#39;</code></td><td><code>&#39;ansi_x3.4-1968&#39;</code>, <code>&#39;ascii&#39;</code>, <code>&#39;cp1252&#39;</code>, <code>&#39;cp819&#39;</code>, <code>&#39;csisolatin1&#39;</code>, <code>&#39;ibm819&#39;</code>, <code>&#39;iso-8859-1&#39;</code>, <code>&#39;iso-ir-100&#39;</code>, <code>&#39;iso8859-1&#39;</code>, <code>&#39;iso88591&#39;</code>, <code>&#39;iso_8859-1&#39;</code>, <code>&#39;iso_8859-1:1987&#39;</code>, <code>&#39;l1&#39;</code>, <code>&#39;latin1&#39;</code>, <code>&#39;us-ascii&#39;</code>, <code>&#39;x-cp1252&#39;</code></td></tr><tr><td><code>&#39;windows-1253&#39;</code></td><td><code>&#39;cp1253&#39;</code>, <code>&#39;x-cp1253&#39;</code></td></tr><tr><td><code>&#39;windows-1254&#39;</code></td><td><code>&#39;cp1254&#39;</code>, <code>&#39;csisolatin5&#39;</code>, <code>&#39;iso-8859-9&#39;</code>, <code>&#39;iso-ir-148&#39;</code>, <code>&#39;iso8859-9&#39;</code>, <code>&#39;iso88599&#39;</code>, <code>&#39;iso_8859-9&#39;</code>, <code>&#39;iso_8859-9:1989&#39;</code>, <code>&#39;l5&#39;</code>, <code>&#39;latin5&#39;</code>, <code>&#39;x-cp1254&#39;</code></td></tr><tr><td><code>&#39;windows-1255&#39;</code></td><td><code>&#39;cp1255&#39;</code>, <code>&#39;x-cp1255&#39;</code></td></tr><tr><td><code>&#39;windows-1256&#39;</code></td><td><code>&#39;cp1256&#39;</code>, <code>&#39;x-cp1256&#39;</code></td></tr><tr><td><code>&#39;windows-1257&#39;</code></td><td><code>&#39;cp1257&#39;</code>, <code>&#39;x-cp1257&#39;</code></td></tr><tr><td><code>&#39;windows-1258&#39;</code></td><td><code>&#39;cp1258&#39;</code>, <code>&#39;x-cp1258&#39;</code></td></tr><tr><td><code>&#39;x-mac-cyrillic&#39;</code></td><td><code>&#39;x-mac-ukrainian&#39;</code></td></tr><tr><td><code>&#39;gbk&#39;</code></td><td><code>&#39;chinese&#39;</code>, <code>&#39;csgb2312&#39;</code>, <code>&#39;csiso58gb231280&#39;</code>, <code>&#39;gb2312&#39;</code>, <code>&#39;gb_2312&#39;</code>, <code>&#39;gb_2312-80&#39;</code>, <code>&#39;iso-ir-58&#39;</code>, <code>&#39;x-gbk&#39;</code></td></tr><tr><td><code>&#39;gb18030&#39;</code></td><td></td></tr><tr><td><code>&#39;big5&#39;</code></td><td><code>&#39;big5-hkscs&#39;</code>, <code>&#39;cn-big5&#39;</code>, <code>&#39;csbig5&#39;</code>, <code>&#39;x-x-big5&#39;</code></td></tr><tr><td><code>&#39;euc-jp&#39;</code></td><td><code>&#39;cseucpkdfmtjapanese&#39;</code>, <code>&#39;x-euc-jp&#39;</code></td></tr><tr><td><code>&#39;iso-2022-jp&#39;</code></td><td><code>&#39;csiso2022jp&#39;</code></td></tr><tr><td><code>&#39;shift_jis&#39;</code></td><td><code>&#39;csshiftjis&#39;</code>, <code>&#39;ms932&#39;</code>, <code>&#39;ms_kanji&#39;</code>, <code>&#39;shift-jis&#39;</code>, <code>&#39;sjis&#39;</code>, <code>&#39;windows-31j&#39;</code>, <code>&#39;x-sjis&#39;</code></td></tr><tr><td><code>&#39;euc-kr&#39;</code></td><td><code>&#39;cseuckr&#39;</code>, <code>&#39;csksc56011987&#39;</code>, <code>&#39;iso-ir-149&#39;</code>, <code>&#39;korean&#39;</code>, <code>&#39;ks_c_5601-1987&#39;</code>, <code>&#39;ks_c_5601-1989&#39;</code>, <code>&#39;ksc5601&#39;</code>, <code>&#39;ksc_5601&#39;</code>, <code>&#39;windows-949&#39;</code></td></tr></tbody></table>',6),G=n("em",null,"Note",-1),H=n("code",null,"'iso-8859-16'",-1),M={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},J=n("h3",{id:"new-textdecoder-encoding-options",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#new-textdecoder-encoding-options"},[n("span",null,"new TextDecoder([encoding[, options]])")])],-1),L=n("li",null,[n("code",null,"encoding"),s(" {string} Identifies the "),n("code",null,"encoding"),s(" that this "),n("code",null,"TextDecoder"),s(" instance supports. Defaults to "),n("code",null,"'utf-8'"),s(".")],-1),V=n("code",null,"options",-1),$=n("code",null,"fatal",-1),K=n("code",null,"true",-1),Q=n("code",null,"false",-1),X=e("<li><code>ignoreBOM</code> {boolean} When <code>true</code>, the <code>TextDecoder</code> will include the byte order mark in the decoded result. When <code>false</code>, the byte order mark will be removed from the output. This option is only used when <code>encoding</code> is <code>&#39;utf-8&#39;</code>, <code>&#39;utf-16be&#39;</code> or <code>&#39;utf-16le&#39;</code>. Defaults to <code>false</code>.</li>",1),Y=e('<p>Creates an new <code>TextDecoder</code> instance. The <code>encoding</code> may specify one of the supported encodings or an alias.</p><h3 id="textdecoder-decode-input-options" tabindex="-1"><a class="header-anchor" href="#textdecoder-decode-input-options"><span>textDecoder.decode([input[, options]])</span></a></h3><ul><li><code>input</code> {ArrayBuffer|DataView|TypedArray} An <code>ArrayBuffer</code>, <code>DataView</code> or Typed Array instance containing the encoded data.</li><li><code>options</code> {Object} <ul><li><code>stream</code> {boolean} <code>true</code> if additional chunks of data are expected. Defaults to <code>false</code>.</li></ul></li><li>Returns: {string}</li></ul><p>Decodes the <code>input</code> and returns a string. If <code>options.stream</code> is <code>true</code>, any incomplete byte sequences occuring at the end of the <code>input</code> are buffered internally and emitted after the next call to <code>textDecoder.decode()</code>.</p><p>If <code>textDecoder.fatal</code> is <code>true</code>, decoding errors that occur will result in a <code>TypeError</code> being thrown.</p><h3 id="textdecoder-encoding" tabindex="-1"><a class="header-anchor" href="#textdecoder-encoding"><span>textDecoder.encoding</span></a></h3><ul><li>{string}</li></ul><p>The encoding supported by the <code>TextDecoder</code> instance.</p><h3 id="textdecoder-fatal" tabindex="-1"><a class="header-anchor" href="#textdecoder-fatal"><span>textDecoder.fatal</span></a></h3><ul><li>{boolean}</li></ul><p>The value will be <code>true</code> if decoding errors result in a <code>TypeError</code> being thrown.</p><h3 id="textdecoder-ignorebom" tabindex="-1"><a class="header-anchor" href="#textdecoder-ignorebom"><span>textDecoder.ignoreBOM</span></a></h3><ul><li>{boolean}</li></ul><p>The value will be <code>true</code> if the decoding result will include the byte order mark.</p><h2 id="class-util-textencoder" tabindex="-1"><a class="header-anchor" href="#class-util-textencoder"><span>Class: util.TextEncoder</span></a></h2><blockquote><p>稳定性: 实验</p></blockquote>',16),Z={href:"https://encoding.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"TextEncoder",-1),sn=n("code",null,"TextEncoder",-1),an=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> uint8array <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;this is some data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="textencoder-encode-input" tabindex="-1"><a class="header-anchor" href="#textencoder-encode-input"><span>textEncoder.encode([input])</span></a></h3><ul><li><code>input</code> {string} The text to encode. Defaults to an empty string.</li><li>Returns: {Uint8Array}</li></ul><p>UTF-8 encodes the <code>input</code> string and returns a <code>Uint8Array</code> containing the encoded bytes.</p><h3 id="textdecoder-encoding-1" tabindex="-1"><a class="header-anchor" href="#textdecoder-encoding-1"><span>textDecoder.encoding</span></a></h3><ul><li>{string}</li></ul><p>The encoding supported by the <code>TextEncoder</code> instance. Always set to <code>&#39;utf-8&#39;</code>.</p><h2 id="deprecated-apis" tabindex="-1"><a class="header-anchor" href="#deprecated-apis"><span>Deprecated APIs</span></a></h2><p>The following APIs have been deprecated and should no longer be used. Existing applications and modules should be updated to find alternative approaches.</p><h3 id="util-extend-target-source" tabindex="-1"><a class="header-anchor" href="#util-extend-target-source"><span>util._extend(target, source)</span></a></h3>`,10),en={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"Object.assign()",-1),on=n("p",null,[s("The "),n("code",null,"util._extend()"),s(" method was never intended to be used outside of internal Node.js modules. The community found and used it anyway.")],-1),cn={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"Object.assign()",-1),ln=n("h3",{id:"util-debug-string",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-debug-string"},[n("span",null,"util.debug(string)")])],-1),un=n("code",null,"console.error()",-1),dn=n("ul",null,[n("li",null,[n("code",null,"string"),s(" {string} The message to print to "),n("code",null,"stderr")])],-1),rn=n("p",null,[s("Deprecated predecessor of "),n("code",null,"console.error"),s(".")],-1),kn=n("h3",{id:"util-error-strings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-error-strings"},[n("span",null,"util.error([...strings])")])],-1),mn=n("code",null,"console.error()",-1),vn=e('<ul><li><code>...strings</code> {string} The message to print to <code>stderr</code></li></ul><p>Deprecated predecessor of <code>console.error</code>.</p><h3 id="util-isarray-object" tabindex="-1"><a class="header-anchor" href="#util-isarray-object"><span>util.isArray(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul>',5),bn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,"Array.isArray",-1),gn=e(`<p>Returns <code>true</code> if the given <code>object</code> is an <code>Array</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isboolean-object" tabindex="-1"><a class="header-anchor" href="#util-isboolean-object"><span>util.isBoolean(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>Boolean</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isbuffer-object" tabindex="-1"><a class="header-anchor" href="#util-isbuffer-object"><span>util.isBuffer(object)</span></a></h3>`,8),fn=n("code",null,"Buffer.isBuffer()",-1),yn=e(`<ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>Buffer</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isdate-object" tabindex="-1"><a class="header-anchor" href="#util-isdate-object"><span>util.isDate(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>Date</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false (without &#39;new&#39; returns a String)</span>
util<span class="token punctuation">.</span><span class="token function">isDate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-iserror-object" tabindex="-1"><a class="header-anchor" href="#util-iserror-object"><span>util.isError(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul>`,11),jn=n("code",null,"true",-1),wn=n("code",null,"object",-1),_n=n("code",null,"Error",-1),xn=n("code",null,"false",-1),qn=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;an error occurred&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that this method relies on <code>Object.prototype.toString()</code> behavior. It is possible to obtain an incorrect result when the <code>object</code> argument manipulates <code>@@toStringTag</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;an error occurred&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">;</span>
util<span class="token punctuation">.</span><span class="token function">isError</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isfunction-object" tabindex="-1"><a class="header-anchor" href="#util-isfunction-object"><span>util.isFunction(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>Function</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">Bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isnull-object" tabindex="-1"><a class="header-anchor" href="#util-isnull-object"><span>util.isNull(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is strictly <code>null</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isnullorundefined-object" tabindex="-1"><a class="header-anchor" href="#util-isnullorundefined-object"><span>util.isNullOrUndefined(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is <code>null</code> or <code>undefined</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isNullOrUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isnumber-object" tabindex="-1"><a class="header-anchor" href="#util-isnumber-object"><span>util.isNumber(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>Number</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isobject-object" tabindex="-1"><a class="header-anchor" href="#util-isobject-object"><span>util.isObject(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is strictly an <code>Object</code> <strong>and</strong> not a <code>Function</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isprimitive-object" tabindex="-1"><a class="header-anchor" href="#util-isprimitive-object"><span>util.isPrimitive(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a primitive type. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isregexp-object" tabindex="-1"><a class="header-anchor" href="#util-isregexp-object"><span>util.isRegExp(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>RegExp</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">some regexp</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;another regexp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isstring-object" tabindex="-1"><a class="header-anchor" href="#util-isstring-object"><span>util.isString(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>string</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-issymbol-object" tabindex="-1"><a class="header-anchor" href="#util-issymbol-object"><span>util.isSymbol(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is a <code>Symbol</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-isundefined-object" tabindex="-1"><a class="header-anchor" href="#util-isundefined-object"><span>util.isUndefined(object)</span></a></h3><blockquote><p>稳定性: 弃用</p></blockquote><ul><li><code>object</code> {any}</li></ul><p>Returns <code>true</code> if the given <code>object</code> is <code>undefined</code>. Otherwise, returns <code>false</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: true</span>
util<span class="token punctuation">.</span><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-log-string" tabindex="-1"><a class="header-anchor" href="#util-log-string"><span>util.log(string)</span></a></h3><blockquote><p>稳定性: 弃用: Use a third party module instead.</p></blockquote><ul><li><code>string</code> {string}</li></ul><p>The <code>util.log()</code> method prints the given <code>string</code> to <code>stdout</code> with an included timestamp.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

util<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Timestamped message.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-print-strings" tabindex="-1"><a class="header-anchor" href="#util-print-strings"><span>util.print([...strings])</span></a></h3>`,59),Rn=n("code",null,"console.log()",-1),En=n("p",null,[s("Deprecated predecessor of "),n("code",null,"console.log"),s(".")],-1),Tn=n("h3",{id:"util-puts-strings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#util-puts-strings"},[n("span",null,"util.puts([...strings])")])],-1),Dn=n("code",null,"console.log()",-1),Sn=n("p",null,[s("Deprecated predecessor of "),n("code",null,"console.log"),s(".")],-1);function On(An,In){const p=i("Badge"),t=i("RouteLink"),c=i("ExternalLinkIcon");return u(),d("div",null,[n("h1",k,[n("a",m,[n("span",null,[s("Util "),a(p,{type:"tip",text:"稳定",vertical:"middle"})])])]),v,n("ul",null,[n("li",null,[n("p",null,[s("The callback is executed asynchronously, and will have a limited stack trace. If the callback throws, the process will emit an "),a(t,{to:"/process.html#process_event_uncaughtexception"},{default:o(()=>[b]),_:1}),s(" event, and if not handled will exit.")])]),h]),g,f,n("p",null,[s("The "),y,s(" method is used to create a function that conditionally writes debug messages to "),j,s(" based on the existence of the "),w,s(" environment variable. If the "),_,s(" name appears within the value of that environment variable, then the returned function operates similar to "),a(t,{to:"/console.html#console_console_error_data_args"},{default:o(()=>[x]),_:1}),s(". If not, then the returned function is a no-op.")]),q,n("p",null,[R,s(": Usage of "),E,s(" is discouraged. Please use the ES6 "),T,s(" and "),D,s(" keywords to get language level inheritance support. Also note that the two styles are "),n("a",S,[s("semantically incompatible"),a(c)]),s(".")]),O,n("p",null,[s("Inherit the prototype methods from one "),n("a",A,[s("constructor"),a(c)]),s(" into another. The prototype of "),I,s(" will be set to a new object created from "),N,s(".")]),B,n("p",null,[s("An implementation of the "),n("a",U,[s("WHATWG Encoding Standard"),a(c)]),s(),C,s(" API.")]),P,n("p",null,[s("Per the "),n("a",F,[s("WHATWG Encoding Standard"),a(c)]),s(", the encodings supported by the "),z,s(" API are outlined in the tables below. For each encoding, one or more aliases may be used.")]),n("p",null,[s("Different Node.js build configurations support different sets of encodings. While a very basic set of encodings is supported even on Node.js builds without ICU enabled, support for some encodings is provided only when Node.js is built with ICU and using the full ICU data (see "),a(t,{to:"/intl.html"},{default:o(()=>[s("Internationalization")]),_:1}),s(").")]),W,n("p",null,[G,s(": The "),H,s(" encoding listed in the "),n("a",M,[s("WHATWG Encoding Standard"),a(c)]),s(" is not supported.")]),J,n("ul",null,[L,n("li",null,[V,s(" {Object} "),n("ul",null,[n("li",null,[$,s(" {boolean} "),K,s(" if decoding failures are fatal. Defaults to "),Q,s(". This option is only supported when ICU is enabled (see "),a(t,{to:"/intl.html"},{default:o(()=>[s("Internationalization")]),_:1}),s(").")]),X])])]),Y,n("p",null,[s("An implementation of the "),n("a",Z,[s("WHATWG Encoding Standard"),a(c)]),s(),nn,s(" API. All instances of "),sn,s(" only support UTF-8 encoding.")]),an,n("blockquote",null,[n("p",null,[s("稳定性: 弃用: Use "),n("a",en,[tn,a(c)]),s(" instead.")])]),on,n("p",null,[s("It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through "),n("a",cn,[pn,a(c)]),s(".")]),ln,n("blockquote",null,[n("p",null,[s("稳定性: 弃用: Use "),a(t,{to:"/console.html#console_console_error_data_args"},{default:o(()=>[un]),_:1}),s(" instead.")])]),dn,rn,kn,n("blockquote",null,[n("p",null,[s("稳定性: 弃用: Use "),a(t,{to:"/console.html#console_console_error_data_args"},{default:o(()=>[mn]),_:1}),s(" instead.")])]),vn,n("p",null,[s("Internal alias for "),n("a",bn,[hn,a(c)]),s(".")]),gn,n("blockquote",null,[n("p",null,[s("稳定性: 弃用: Use "),a(t,{to:"/buffer.html#buffer_class_method_buffer_isbuffer_obj"},{default:o(()=>[fn]),_:1}),s(" instead.")])]),yn,n("p",null,[s("Returns "),jn,s(" if the given "),wn,s(" is an "),a(t,{to:"/errors.html#errors_class_error"},{default:o(()=>[_n]),_:1}),s(". Otherwise, returns "),xn,s(".")]),qn,n("blockquote",null,[n("p",null,[s("稳定性: 弃用: Use "),a(t,{to:"/console.html#console_console_log_data_args"},{default:o(()=>[Rn]),_:1}),s(" instead.")])]),En,Tn,n("blockquote",null,[n("p",null,[s("稳定性: 弃用: Use "),a(t,{to:"/console.html#console_console_log_data_args"},{default:o(()=>[Dn]),_:1}),s(" instead.")])]),Sn])}const Bn=l(r,[["render",On],["__file","util.html.vue"]]),Un=JSON.parse('{"path":"/util.html","title":"Util","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"util.callbackify(original)","slug":"util-callbackify-original","link":"#util-callbackify-original","children":[]},{"level":2,"title":"util.debuglog(section)","slug":"util-debuglog-section","link":"#util-debuglog-section","children":[]},{"level":2,"title":"util.deprecate(function, string)","slug":"util-deprecate-function-string","link":"#util-deprecate-function-string","children":[]},{"level":2,"title":"util.format(format[, ...args])","slug":"util-format-format-args","link":"#util-format-format-args","children":[]},{"level":2,"title":"util.inherits(constructor, superConstructor)","slug":"util-inherits-constructor-superconstructor","link":"#util-inherits-constructor-superconstructor","children":[]},{"level":2,"title":"util.inspect(object[, options])","slug":"util-inspect-object-options","link":"#util-inspect-object-options","children":[{"level":3,"title":"Customizing util.inspect colors","slug":"customizing-util-inspect-colors","link":"#customizing-util-inspect-colors","children":[]},{"level":3,"title":"Custom inspection functions on Objects","slug":"custom-inspection-functions-on-objects","link":"#custom-inspection-functions-on-objects","children":[]},{"level":3,"title":"util.inspect.custom","slug":"util-inspect-custom","link":"#util-inspect-custom","children":[]},{"level":3,"title":"util.inspect.defaultOptions","slug":"util-inspect-defaultoptions","link":"#util-inspect-defaultoptions","children":[]}]},{"level":2,"title":"util.promisify(original)","slug":"util-promisify-original","link":"#util-promisify-original","children":[{"level":3,"title":"Custom promisified functions","slug":"custom-promisified-functions","link":"#custom-promisified-functions","children":[]},{"level":3,"title":"util.promisify.custom","slug":"util-promisify-custom","link":"#util-promisify-custom","children":[]}]},{"level":2,"title":"Class: util.TextDecoder","slug":"class-util-textdecoder","link":"#class-util-textdecoder","children":[{"level":3,"title":"WHATWG Supported Encodings","slug":"whatwg-supported-encodings","link":"#whatwg-supported-encodings","children":[]},{"level":3,"title":"new TextDecoder([encoding[, options]])","slug":"new-textdecoder-encoding-options","link":"#new-textdecoder-encoding-options","children":[]},{"level":3,"title":"textDecoder.decode([input[, options]])","slug":"textdecoder-decode-input-options","link":"#textdecoder-decode-input-options","children":[]},{"level":3,"title":"textDecoder.encoding","slug":"textdecoder-encoding","link":"#textdecoder-encoding","children":[]},{"level":3,"title":"textDecoder.fatal","slug":"textdecoder-fatal","link":"#textdecoder-fatal","children":[]},{"level":3,"title":"textDecoder.ignoreBOM","slug":"textdecoder-ignorebom","link":"#textdecoder-ignorebom","children":[]}]},{"level":2,"title":"Class: util.TextEncoder","slug":"class-util-textencoder","link":"#class-util-textencoder","children":[{"level":3,"title":"textEncoder.encode([input])","slug":"textencoder-encode-input","link":"#textencoder-encode-input","children":[]},{"level":3,"title":"textDecoder.encoding","slug":"textdecoder-encoding-1","link":"#textdecoder-encoding-1","children":[]}]},{"level":2,"title":"Deprecated APIs","slug":"deprecated-apis","link":"#deprecated-apis","children":[{"level":3,"title":"util._extend(target, source)","slug":"util-extend-target-source","link":"#util-extend-target-source","children":[]},{"level":3,"title":"util.debug(string)","slug":"util-debug-string","link":"#util-debug-string","children":[]},{"level":3,"title":"util.error([...strings])","slug":"util-error-strings","link":"#util-error-strings","children":[]},{"level":3,"title":"util.isArray(object)","slug":"util-isarray-object","link":"#util-isarray-object","children":[]},{"level":3,"title":"util.isBoolean(object)","slug":"util-isboolean-object","link":"#util-isboolean-object","children":[]},{"level":3,"title":"util.isBuffer(object)","slug":"util-isbuffer-object","link":"#util-isbuffer-object","children":[]},{"level":3,"title":"util.isDate(object)","slug":"util-isdate-object","link":"#util-isdate-object","children":[]},{"level":3,"title":"util.isError(object)","slug":"util-iserror-object","link":"#util-iserror-object","children":[]},{"level":3,"title":"util.isFunction(object)","slug":"util-isfunction-object","link":"#util-isfunction-object","children":[]},{"level":3,"title":"util.isNull(object)","slug":"util-isnull-object","link":"#util-isnull-object","children":[]},{"level":3,"title":"util.isNullOrUndefined(object)","slug":"util-isnullorundefined-object","link":"#util-isnullorundefined-object","children":[]},{"level":3,"title":"util.isNumber(object)","slug":"util-isnumber-object","link":"#util-isnumber-object","children":[]},{"level":3,"title":"util.isObject(object)","slug":"util-isobject-object","link":"#util-isobject-object","children":[]},{"level":3,"title":"util.isPrimitive(object)","slug":"util-isprimitive-object","link":"#util-isprimitive-object","children":[]},{"level":3,"title":"util.isRegExp(object)","slug":"util-isregexp-object","link":"#util-isregexp-object","children":[]},{"level":3,"title":"util.isString(object)","slug":"util-isstring-object","link":"#util-isstring-object","children":[]},{"level":3,"title":"util.isSymbol(object)","slug":"util-issymbol-object","link":"#util-issymbol-object","children":[]},{"level":3,"title":"util.isUndefined(object)","slug":"util-isundefined-object","link":"#util-isundefined-object","children":[]},{"level":3,"title":"util.log(string)","slug":"util-log-string","link":"#util-log-string","children":[]},{"level":3,"title":"util.print([...strings])","slug":"util-print-strings","link":"#util-print-strings","children":[]},{"level":3,"title":"util.puts([...strings])","slug":"util-puts-strings","link":"#util-puts-strings","children":[]}]}],"git":{"updatedTime":1713029763000,"contributors":[{"name":"Lin","email":"yditmxpev@mozmail.com","commits":1}]},"filePathRelative":"util.md"}');export{Bn as comp,Un as data};
