import{_ as s,r as o,o as d,c as r,d as a,b as l,a as e,e as n}from"./app-BpvbY-DG.js";const c={},u=e("h1",{id:"ml-kit-ocr",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ml-kit-ocr"},[e("span",null,"ML kit OCR")])],-1),p=e("h2",{id:"gmlkit-ocr-img-language",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#gmlkit-ocr-img-language"},[e("span",null,"gmlkit.ocr(img, language)")])],-1),m=e("p",null,"对给定的图像进行文字识别。",-1),h=e("li",null,[e("code",null,"img"),l(" {Image} 图片")],-1),g=e("code",null,"Language",-1),_=e("li",null,[e("code",null,"zh"),l(" 中文")],-1),v=e("li",null,[e("code",null,"sa"),l(" 梵文")],-1),f=e("li",null,[e("code",null,"ja"),l(" 日语")],-1),k=e("li",null,[e("code",null,"ko"),l(" 韩语")],-1),R={href:"https://developers.google.com/ml-kit/vision/text-recognition/v2/languages?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,[e("code",null,"retrun"),l("{"),e("a",{href:"#Result"},"Result"),l("} 文字识别结果。")],-1),y=n(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 识别中文</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> gmlkit<span class="token punctuation">.</span><span class="token function">ocr</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gmlkit-ocrtext-img-language" tabindex="-1"><a class="header-anchor" href="#gmlkit-ocrtext-img-language"><span>gmlkit.ocrText(img, language)</span></a></h2><p>对给定的图像进行文字识别，并返回识别到的文本字符串。</p>`,3),b=e("li",null,[e("code",null,"img"),l(" {Image} 图片")],-1),C=e("code",null,"Language",-1),O=e("li",null,[e("code",null,"zh"),l(" 中文")],-1),N=e("li",null,[e("code",null,"sa"),l(" 梵文")],-1),S=e("li",null,[e("code",null,"ja"),l(" 日语")],-1),T=e("li",null,[e("code",null,"ko"),l(" 韩语")],-1),P={href:"https://developers.google.com/ml-kit/vision/text-recognition/v2/languages?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},M=e("li",null,[e("code",null,"retrun"),l(" {String} 识别到的文本字符串。")],-1),A=n(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 识别中文</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> gmlkit<span class="token punctuation">.</span><span class="token function">ocrText</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="result" tabindex="-1"><a class="header-anchor" href="#result"><span>Result</span></a></h2><p>表示 Google ML Kit 文字识别返回的结果,有以下几个属性：</p>`,3),I=e("li",null,[e("code",null,"level"),l(" {Number} 结果的层级。")],-1),j=e("li",null,[e("code",null,"confidence"),l(" {Number} 识别结果的置信度。")],-1),L=e("li",null,[e("code",null,"text"),l(" {String} 识别到的文本。")],-1),U=e("li",null,[e("code",null,"language"),l(" {String} 识别到的语言。")],-1),z=e("code",null,"bounds",-1),B={href:"https://developer.android.google.cn/reference/kotlin/android/graphics/Rect?hl=en",target:"_blank",rel:"noopener noreferrer"},w=e("li",null,[e("code",null,"children"),l(" {Array} 子列表，包含更详细的内容。")],-1),J=n('<h3 id="result-find-predicate" tabindex="-1"><a class="header-anchor" href="#result-find-predicate"><span>Result.find(predicate)</span></a></h3><p>查找符合条件的第一个元素，没找到则返回 <code>null</code>。</p><ul><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Result}</li></ul><h3 id="result-find-level-predicate" tabindex="-1"><a class="header-anchor" href="#result-find-level-predicate"><span>Result.find(level,predicate)</span></a></h3><p>查找指定层级中符合条件的第一个元素，没找到则返回 <code>null</code>。</p><ul><li><code>level</code> {Number} 指定的层级。</li><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Result}</li></ul><h3 id="result-filter-predicate" tabindex="-1"><a class="header-anchor" href="#result-filter-predicate"><span>Result.filter(predicate)</span></a></h3><p>查找符合条件的所有元素</p><ul><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-filter-level-predicate" tabindex="-1"><a class="header-anchor" href="#result-filter-level-predicate"><span>Result.filter(level,predicate)</span></a></h3><p>在指定层级中查找符合条件的所有元素</p><ul><li><code>level</code> {Number} 指定的层级。</li><li><code>predicate</code> {Function} 用于判断的函数，接受一个 <code>Result</code> 对象作为参数。</li><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-toarray" tabindex="-1"><a class="header-anchor" href="#result-toarray"><span>Result.toArray()</span></a></h3><p>将结果转换成数组</p><ul><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-toarray-level" tabindex="-1"><a class="header-anchor" href="#result-toarray-level"><span>Result.toArray(level)</span></a></h3><p>将指定层级结果转换成数组</p><ul><li><code>level</code> {Number} 层级</li><li><code>return</code> {Array} Java 数组</li></ul><h3 id="result-sort" tabindex="-1"><a class="header-anchor" href="#result-sort"><span>Result.sort()</span></a></h3><p>根据<code>bounds</code>的位置对原结果进行排序</p><h3 id="result-sorted" tabindex="-1"><a class="header-anchor" href="#result-sorted"><span>Result.sorted()</span></a></h3><p>同上,返回排序后的 Result 对象</p><ul><li><p><code>return</code> {Result}</p></li></ul><h1 id="paddle" tabindex="-1"><a class="header-anchor" href="#paddle"><span>paddle</span></a></h1>',24),q=n('<h2 id="paddle-ocr-image-useslim" tabindex="-1"><a class="header-anchor" href="#paddle-ocr-image-useslim"><span>paddle.ocr(image,useSlim)</span></a></h2><p>使用指定的 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>useSlim</code> {Boolean} 加载的模型,可选值: <ul><li><code>true</code> ocr_v2_for_cpu(slim) :快速模型</li><li><code>false</code> ocr_v2_for_cpu : 精准模型</li></ul></li><li><code>return</code> {Array} 识别结果数组,值为 <a href="#ocrresult">OcrResult</a></li></ul><h2 id="paddle-ocr-image-cputhreadnum-useslim" tabindex="-1"><a class="header-anchor" href="#paddle-ocr-image-cputhreadnum-useslim"><span>paddle.ocr(image,[cpuThreadNum,useSlim])</span></a></h2><p>使用指定的 CPU 核心数和 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>cpuThreadNum</code> {Number} 用于执行 OCR 的 CPU 核心数。默认值:系统的 CPU 核心数</li><li><code>useSlim</code> {Boolean} 加载的模型,可选值: <ul><li><code>true</code> ocr_v2_for_cpu(slim) :快速模型,默认</li><li><code>false</code> ocr_v2_for_cpu : 精准模型</li></ul></li><li><code>return</code> {Array} 识别结果数组,值为 <a href="#ocrresult">OcrResult</a></li></ul><h2 id="paddle-ocr-image-cputhreadnum-mymodelpath" tabindex="-1"><a class="header-anchor" href="#paddle-ocr-image-cputhreadnum-mymodelpath"><span>paddle.ocr(image,cpuThreadNum,myModelPath)</span></a></h2><p>使用指定的 CPU 核心数和自定义 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>cpuThreadNum</code> {Number} 用于执行 OCR 的 CPU 核心数。</li><li><code>myModelPath</code> {String} 自定义 OCR 模型的绝对路径。</li><li><code>return</code> {Array} 识别结果数组,值为 <a href="#ocrresult">OcrResult</a></li></ul><h2 id="paddle-ocr-image-mymodelpath" tabindex="-1"><a class="header-anchor" href="#paddle-ocr-image-mymodelpath"><span>paddle.ocr(image,myModelPath)</span></a></h2><p>使用自定义 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>myModelPath</code> {String} 自定义 OCR 模型的绝对路径。</li><li><code>return</code> {Array} 识别结果数组,值为 <a href="#ocrresult">OcrResult</a></li></ul><h2 id="paddle-ocrtext-image-useslim" tabindex="-1"><a class="header-anchor" href="#paddle-ocrtext-image-useslim"><span>paddle.ocrText(image,useSlim)</span></a></h2><p>使用指定的 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>useSlim</code> {Boolean} 加载的模型,可选值: <ul><li><code>true</code> ocr_v2_for_cpu(slim) :快速模型</li><li><code>false</code> ocr_v2_for_cpu : 精准模型</li></ul></li><li><code>return</code> {String} 识别到的文本字符串。</li></ul><h2 id="paddle-ocrtext-image-cputhreadnum-useslim" tabindex="-1"><a class="header-anchor" href="#paddle-ocrtext-image-cputhreadnum-useslim"><span>paddle.ocrText(image,[cpuThreadNum,useSlim])</span></a></h2><p>使用指定的 CPU 核心数和 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>cpuThreadNum</code> {Number} 用于执行 OCR 的 CPU 核心数。默认值:系统的 CPU 核心数</li><li><code>useSlim</code> {Boolean} 加载的模型,可选值: <ul><li><code>true</code> ocr_v2_for_cpu(slim) :快速模型,默认</li><li><code>false</code> ocr_v2_for_cpu : 精准模型</li></ul></li><li><code>return</code> {String} 识别到的文本字符串。</li></ul><h2 id="paddle-ocrtext-image-cputhreadnum-mymodelpath" tabindex="-1"><a class="header-anchor" href="#paddle-ocrtext-image-cputhreadnum-mymodelpath"><span>paddle.ocrText(image,cpuThreadNum,myModelPath)</span></a></h2><p>使用指定的 CPU 核心数和自定义 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>cpuThreadNum</code> {Number} 用于执行 OCR 的 CPU 核心数。</li><li><code>myModelPath</code> {String} 自定义 OCR 模型的绝对路径。</li><li><code>return</code> {String} 识别到的文本字符串。</li></ul><h2 id="paddle-ocrtext-image-mymodelpath" tabindex="-1"><a class="header-anchor" href="#paddle-ocrtext-image-mymodelpath"><span>paddle.ocrText(image,myModelPath)</span></a></h2><p>使用自定义 OCR 模型来执行 OCR。</p><ul><li><code>image</code> {Image} 要执行 OCR 的图像。</li><li><code>myModelPath</code> {String} 自定义 OCR 模型的绝对路径。</li><li><code>return</code> {String} 识别到的文本字符串。</li></ul><h3 id="ocrresult" tabindex="-1"><a class="header-anchor" href="#ocrresult"><span>OcrResult</span></a></h3><p><code>OcrResult</code> 是一个表示 OCR 结果的类。它包含以下字段：</p>',26),F=e("li",null,[e("code",null,"confidence"),l(" {Number} 识别的置信度。")],-1),V=e("li",null,[e("code",null,"preprocessTime"),l(" {Number} 预处理时间。")],-1),E=e("li",null,[e("code",null,"inferenceTime"),l(" {Number} 推理时间。")],-1),G=e("li",null,[e("code",null,"text"),l(" {String} 识别出的文本。")],-1),K=e("code",null,"bounds",-1),Y={href:"https://developer.android.google.cn/reference/kotlin/android/graphics/Rect?hl=en",target:"_blank",rel:"noopener noreferrer"},D={id:"tessract",tabindex:"-1"},H={class:"header-anchor",href:"#tessract"},Q={href:"https://github.com/wilinz/autoxjs-tessocr",target:"_blank",rel:"noopener noreferrer"};function W(X,Z){const t=o("Badge"),i=o("ExternalLinkIcon");return d(),r("div",null,[u,a(t,{type:"tip",text:"6.3.4+",vertical:"middle"}),l(),a(t,{type:"warning",text:"实验",vertical:"middle"}),p,m,e("ul",null,[h,e("li",null,[g,l(" {String} 识别语言，可选值为： "),e("ul",null,[_,v,f,k,e("li",null,[e("a",R,[l("其他语言"),a(i)])])])]),x]),y,e("ul",null,[b,e("li",null,[C,l(" {String} 识别语言，可选值为： "),e("ul",null,[O,N,S,T,e("li",null,[e("a",P,[l("其他语言"),a(i)])])])]),M]),A,e("ul",null,[I,j,L,U,e("li",null,[z,l(" {"),e("a",B,[l("Rect"),a(i)]),l("} 文本在图片中的位置")]),w]),J,a(t,{type:"tip",text:"5.6.1",vertical:"middle"}),l(),a(t,{type:"warning",text:"实验",vertical:"middle"}),q,e("ul",null,[F,V,E,G,e("li",null,[K,l(" {"),e("a",Y,[l("Rect"),a(i)]),l("} 文本在图像中的位置")])]),e("h1",D,[e("a",H,[e("span",null,[l("Tessract "),a(t,{type:"tip",text:"6.2.9",vertical:"top"}),l(),a(t,{type:"tip",text:"实验",vertical:"middle"})])])]),e("p",null,[l("前往 github 下载完整例子："),e("a",Q,[l("Tessract OCR"),a(i)])])])}const ee=s(c,[["render",W],["__file","gmlkit.html.vue"]]),le=JSON.parse('{"path":"/gmlkit.html","title":"ML kit OCR","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"gmlkit.ocr(img, language)","slug":"gmlkit-ocr-img-language","link":"#gmlkit-ocr-img-language","children":[]},{"level":2,"title":"gmlkit.ocrText(img, language)","slug":"gmlkit-ocrtext-img-language","link":"#gmlkit-ocrtext-img-language","children":[]},{"level":2,"title":"Result","slug":"result","link":"#result","children":[{"level":3,"title":"Result.find(predicate)","slug":"result-find-predicate","link":"#result-find-predicate","children":[]},{"level":3,"title":"Result.find(level,predicate)","slug":"result-find-level-predicate","link":"#result-find-level-predicate","children":[]},{"level":3,"title":"Result.filter(predicate)","slug":"result-filter-predicate","link":"#result-filter-predicate","children":[]},{"level":3,"title":"Result.filter(level,predicate)","slug":"result-filter-level-predicate","link":"#result-filter-level-predicate","children":[]},{"level":3,"title":"Result.toArray()","slug":"result-toarray","link":"#result-toarray","children":[]},{"level":3,"title":"Result.toArray(level)","slug":"result-toarray-level","link":"#result-toarray-level","children":[]},{"level":3,"title":"Result.sort()","slug":"result-sort","link":"#result-sort","children":[]},{"level":3,"title":"Result.sorted()","slug":"result-sorted","link":"#result-sorted","children":[]}]},{"level":2,"title":"paddle.ocr(image,useSlim)","slug":"paddle-ocr-image-useslim","link":"#paddle-ocr-image-useslim","children":[]},{"level":2,"title":"paddle.ocr(image,[cpuThreadNum,useSlim])","slug":"paddle-ocr-image-cputhreadnum-useslim","link":"#paddle-ocr-image-cputhreadnum-useslim","children":[]},{"level":2,"title":"paddle.ocr(image,cpuThreadNum,myModelPath)","slug":"paddle-ocr-image-cputhreadnum-mymodelpath","link":"#paddle-ocr-image-cputhreadnum-mymodelpath","children":[]},{"level":2,"title":"paddle.ocr(image,myModelPath)","slug":"paddle-ocr-image-mymodelpath","link":"#paddle-ocr-image-mymodelpath","children":[]},{"level":2,"title":"paddle.ocrText(image,useSlim)","slug":"paddle-ocrtext-image-useslim","link":"#paddle-ocrtext-image-useslim","children":[]},{"level":2,"title":"paddle.ocrText(image,[cpuThreadNum,useSlim])","slug":"paddle-ocrtext-image-cputhreadnum-useslim","link":"#paddle-ocrtext-image-cputhreadnum-useslim","children":[]},{"level":2,"title":"paddle.ocrText(image,cpuThreadNum,myModelPath)","slug":"paddle-ocrtext-image-cputhreadnum-mymodelpath","link":"#paddle-ocrtext-image-cputhreadnum-mymodelpath","children":[]},{"level":2,"title":"paddle.ocrText(image,myModelPath)","slug":"paddle-ocrtext-image-mymodelpath","link":"#paddle-ocrtext-image-mymodelpath","children":[{"level":3,"title":"OcrResult","slug":"ocrresult","link":"#ocrresult","children":[]}]}],"git":{"updatedTime":1716001176000,"contributors":[{"name":"Lin","email":"106499400+LYS86@users.noreply.github.com","commits":1},{"name":"Lin","email":"yditmxpev@mozmail.com","commits":1}]},"filePathRelative":"gmlkit.md"}');export{ee as comp,le as data};
