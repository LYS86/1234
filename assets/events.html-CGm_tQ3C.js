import{_ as i,r as a,o as c,c as l,d as e,a as n,b as s,w as u,e as t}from"./app-BpvbY-DG.js";const r={},k=n("h1",{id:"事件与监听-events",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件与监听-events"},[n("span",null,"事件与监听-events")])],-1),d=t(`<p>events 模块提供了监听手机通知、按键、触摸的接口。您可以用他配合自动操作函数完成自动化工作。</p><p>events 本身是一个<a href="#eventemitter">EventEmiiter</a>, 但内置了一些事件、包括按键事件、通知事件、Toast 事件等。</p><p>需要注意的是，事件的处理是单线程的，并且仍然在原线程执行，如果脚本主体或者其他事件处理中有耗时操作、轮询等，则事件将无法得到及时处理（会进入事件队列等待脚本主体或其他事件处理完成才执行）。例如:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;toast&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//这段代码将得不到执行</span>
  <span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//死循环</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-emitter" tabindex="-1"><a class="header-anchor" href="#events-emitter"><span>events.emitter()</span></a></h2><p>返回一个新的<a href="#eventemitter">EventEmitter</a>。这个 EventEmitter 没有内置任何事件。</p><h2 id="events-observekey" tabindex="-1"><a class="header-anchor" href="#events-observekey"><span>events.observeKey()</span></a></h2><p>启用按键监听，例如音量键、Home 键。按键监听使用无障碍服务实现，如果无障碍服务未启用会抛出异常并提示开启。</p><p>只有这个函数成功执行后, <code>onKeyDown</code>, <code>onKeyUp</code>等按键事件的监听才有效。</p><p>该函数在安卓 4.3 以上才能使用。</p><h2 id="events-onkeydown-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-onkeydown-keyname-listener"><span>events.onKeyDown(keyName, listener)</span></a></h2><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个<a href="#keyevent">KeyEvent</a>。</li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键被按下会调用该函数。可用的按键名称参见<a href="#keys">Keys</a>。</p><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//启用按键监听</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听音量上键按下</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;volume_up&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;音量上键被按下了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听菜单键按下</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;menu&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;菜单键被按下了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-onkeyup-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-onkeyup-keyname-listener"><span>events.onKeyUp(keyName, listener)</span></a></h2><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个<a href="#keyevent">KeyEvent</a>。</li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键弹起会调用该函数。可用的按键名称参见<a href="#keys">Keys</a>。</p><p>一次完整的按键动作包括了按键按下和弹起。按下事件会在手指按下一个按键的&quot;瞬间&quot;触发, 弹起事件则在手指放开这个按键时触发。</p><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//启用按键监听</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听音量下键弹起</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;volume_down&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;音量下键弹起&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//监听Home键弹起</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;Home键弹起&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-oncekeydown-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-oncekeydown-keyname-listener"><span>events.onceKeyDown(keyName, listener)</span></a></h2><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个<a href="#keyevent">KeyEvent</a></li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键被按下时会调用该函数，之后会注销该按键监听器。</p><p>也就是 listener 只有在 onceKeyDown 调用后的第一次按键事件被调用一次。</p><h2 id="events-oncekeyup-keyname-listener" tabindex="-1"><a class="header-anchor" href="#events-oncekeyup-keyname-listener"><span>events.onceKeyUp(keyName, listener)</span></a></h2><ul><li><code>keyName</code> {string} 要监听的按键名称</li><li><code>listener</code> {Function} 按键监听器。参数为一个<a href="#keyevent">KeyEvent</a></li></ul><p>注册一个按键监听函数，当有 keyName 对应的按键弹起时会调用该函数，之后会注销该按键监听器。</p><p>也就是 listener 只有在 onceKeyUp 调用后的第一次按键事件被调用一次。</p><h2 id="events-removeallkeydownlisteners-keyname" tabindex="-1"><a class="header-anchor" href="#events-removeallkeydownlisteners-keyname"><span>events.removeAllKeyDownListeners(keyName)</span></a></h2><ul><li><code>keyName</code> {string} 按键名称</li></ul><p>删除该按键的 KeyDown(按下)事件的所有监听。</p><h2 id="events-removeallkeyuplisteners-keyname" tabindex="-1"><a class="header-anchor" href="#events-removeallkeyuplisteners-keyname"><span>events.removeAllKeyUpListeners(keyName)</span></a></h2><ul><li><code>keyName</code> {string} 按键名称</li></ul><p>删除该按键的 KeyUp(弹起)事件的所有监听。</p><h2 id="events-setkeyinterceptionenabled-key-enabled" tabindex="-1"><a class="header-anchor" href="#events-setkeyinterceptionenabled-key-enabled"><span>events.setKeyInterceptionEnabled([key, ]enabled)</span></a></h2><ul><li><code>enabled</code> {boolean}</li><li><code>key</code> {string} 要屏蔽的按键</li></ul><p>设置按键屏蔽是否启用。所谓按键屏蔽指的是，屏蔽原有按键的功能，例如使得音量键不再能调节音量，但此时仍然能通过按键事件监听按键。</p><p>如果不加参数 key 则会屏蔽所有按键。</p><p>例如，调用<code>events.setKeyInterceptionEnabled(true)</code>会使系统的音量、Home、返回等键不再具有调节音量、回到主页、返回的作用，但此时仍然能通过按键事件监听按键。</p><p>该函数通常于按键监听结合，例如想监听音量键并使音量键按下时不弹出音量调节框则为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">setKeyInterceptionEnabled</span><span class="token punctuation">(</span><span class="token string">&quot;volume_up&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token string">&quot;volume_up&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;音量上键被按下&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要有一个脚本屏蔽了某个按键，该按键便会被屏蔽；当脚本退出时，会自动解除所有按键屏蔽。</p><h2 id="events-observetouch" tabindex="-1"><a class="header-anchor" href="#events-observetouch"><span>events.observeTouch()</span></a></h2><p>启用屏幕触摸监听。（需要 root 权限）</p><p>只有这个函数被成功执行后, 触摸事件的监听才有效。</p><p>没有 root 权限调用该函数则什么也不会发生。</p><h2 id="events-settoucheventtimeout-timeout" tabindex="-1"><a class="header-anchor" href="#events-settoucheventtimeout-timeout"><span>events.setTouchEventTimeout(timeout)</span></a></h2><ul><li><code>timeout</code> {number} 两个触摸事件的最小间隔。单位毫秒。默认为 10 毫秒。如果 number 小于 0，视为 0 处理。</li></ul><p>设置两个触摸事件分发的最小时间间隔。</p><p>例如间隔为 10 毫秒的话，前一个触摸事件发生并被注册的监听器处理后，至少要过 10 毫秒才能分发和处理下一个触摸事件，这 10 毫秒之间的触摸将会被忽略。</p><p>建议在满足需要的情况下尽量提高这个间隔。一个简单滑动动作可能会连续触发上百个触摸事件，如果 timeout 设置过低可能造成事件拥堵。强烈建议不要设置 timeout 为 0。</p><h2 id="events-gettoucheventtimeout" tabindex="-1"><a class="header-anchor" href="#events-gettoucheventtimeout"><span>events.getTouchEventTimeout()</span></a></h2><p>返回触摸事件的最小时间间隔。</p><h2 id="events-ontouch-listener" tabindex="-1"><a class="header-anchor" href="#events-ontouch-listener"><span>events.onTouch(listener)</span></a></h2>`,55),v=n("code",null,"listener",-1),m=t(`<p>注册一个触摸监听函数。相当于<code>on(&quot;touch&quot;, listener)</code>。</p><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//启用触摸监听</span>
events<span class="token punctuation">.</span><span class="token function">observeTouch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注册触摸监听器</span>
events<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//触摸事件发生时, 打印出触摸的点的坐标</span>
  <span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-removealltouchlisteners" tabindex="-1"><a class="header-anchor" href="#events-removealltouchlisteners"><span>events.removeAllTouchListeners()</span></a></h2><p>删除所有事件监听函数。</p><h2 id="事件-key" tabindex="-1"><a class="header-anchor" href="#事件-key"><span>事件: &#39;key&#39;</span></a></h2><ul><li><code>keyCode</code> {number} 键值</li><li><code>event</code> {KeyEvent} 事件</li></ul><p>当有按键被按下或弹起时会触发该事件。 例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//处理按键事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中监听器的参数 KeyCode 包括：</p><ul><li><code>keys.home</code> 主页键</li><li><code>keys.back</code> 返回键</li><li><code>keys.menu</code> 菜单键</li><li><code>keys.volume_up</code> 音量上键</li><li><code>keys.volume_down</code> 音量下键</li></ul><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span> keys<span class="token punctuation">.</span>menu <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token constant">ACTION_UP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;菜单键按下&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件-key-down" tabindex="-1"><a class="header-anchor" href="#事件-key-down"><span>事件: &#39;key_down&#39;</span></a></h2><ul><li><code>keyCode</code> {number} 键值</li><li><code>event</code> {KeyEvent} 事件</li></ul><p>当有按键被按下时会触发该事件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key_down&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//处理按键按下事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件-key-up" tabindex="-1"><a class="header-anchor" href="#事件-key-up"><span>事件: &#39;key_up&#39;</span></a></h2><ul><li><code>keyCode</code> {number} 键值</li><li><code>event</code> {KeyEvent} 事件</li></ul><p>当有按键弹起时会触发该事件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">auto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">observeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;key_up&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">keyCode<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//处理按键弹起事件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件-exit" tabindex="-1"><a class="header-anchor" href="#事件-exit"><span>事件: &#39;exit\`</span></a></h2><p>当脚本正常或者异常退出时会触发该事件。事件处理中如果有异常抛出，则立即中止 exit 事件的处理（即使 exit 事件有多个处理函数）并在控制台和日志中打印该异常。</p><p>一个脚本停止运行时，会关闭该脚本的所有悬浮窗，触发 exit 事件，之后再回收资源。如果 exit 事件的处理中有死循环，则后续资源无法得到及时回收。 此时脚本会停留在任务列表，如果在任务列表中关闭，则会强制结束 exit 事件的处理并回收后续资源。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;开始运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;结束运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;即将结束运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-observenotification" tabindex="-1"><a class="header-anchor" href="#events-observenotification"><span>events.observeNotification()</span></a></h2><p>开启通知监听。例如 QQ 消息、微信消息、推送等通知。</p><p>通知监听依赖于通知服务，如果通知服务没有运行，会抛出异常并跳转到通知权限开启界面。（有时即使通知权限已经开启通知服务也没有运行，这时需要关闭权限再重新开启一次）</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">onNotification</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">notification</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span>notification<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events-observetoast" tabindex="-1"><a class="header-anchor" href="#events-observetoast"><span>events.observeToast()</span></a></h2><p>开启 Toast 监听。</p><p>Toast 监听依赖于无障碍服务，因此此函数会确保无障碍服务运行。</p><h2 id="事件-toast" tabindex="-1"><a class="header-anchor" href="#事件-toast"><span>事件: &#39;toast&#39;</span></a></h2><ul><li><code>toast</code> {Object} <ul><li><code>getText()</code> 获取 Toast 的文本内容</li><li><code>getPackageName()</code> 获取发出 Toast 的应用包名</li></ul></li></ul><p>当有应用发出 toast(气泡消息)时会触发该事件。但 Auto.js 软件本身的 toast 除外。</p><p>例如，要记录发出所有 toast 的应用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeToast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">onToast</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">toast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Toast内容: &quot;</span> <span class="token operator">+</span> toast<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 包名: &quot;</span> <span class="token operator">+</span> toast<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件-notification" tabindex="-1"><a class="header-anchor" href="#事件-notification"><span>事件: &#39;notification&#39;</span></a></h2><ul><li><code>notification</code> <a href="#notification">Notification</a> 通知对象</li></ul><p>当有应用发出通知时会触发该事件，参数为<a href="#notification">Notification</a>。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;notification&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token string">&quot;收到新通知:\\n 标题: %s, 内容: %s, \\n包名: %s&quot;</span><span class="token punctuation">,</span>
    n<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="notification" tabindex="-1"><a class="header-anchor" href="#notification"><span>Notification</span></a></h1><p>通知对象，可以获取通知详情，包括通知标题、内容、发出通知的包名、时间等，也可以对通知进行操作，比如点击、删除。</p><h2 id="notification-number" tabindex="-1"><a class="header-anchor" href="#notification-number"><span>Notification.number</span></a></h2><ul><li>{number}</li></ul><p>通知数量。例如 QQ 连续收到两条消息时 number 为 2。</p><h2 id="notification-when" tabindex="-1"><a class="header-anchor" href="#notification-when"><span>Notification.when</span></a></h2><ul><li>{number}</li></ul><p>通知发出时间的时间戳，可以用于构造<code>Date</code>对象。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span><span class="token function">observeNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;notification&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;通知时间为}&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="notification-getpackagename" tabindex="-1"><a class="header-anchor" href="#notification-getpackagename"><span>Notification.getPackageName()</span></a></h2><ul><li>返回 {string}</li></ul><p>获取发出通知的应用包名。</p><h2 id="notification-gettitle" tabindex="-1"><a class="header-anchor" href="#notification-gettitle"><span>Notification.getTitle()</span></a></h2><ul><li>返回 {string}</li></ul><p>获取通知的标题。</p><h2 id="notification-gettext" tabindex="-1"><a class="header-anchor" href="#notification-gettext"><span>Notification.getText()</span></a></h2><ul><li>返回 {string}</li></ul><p>获取通知的内容。</p><h2 id="notification-click" tabindex="-1"><a class="header-anchor" href="#notification-click"><span>Notification.click()</span></a></h2><p>点击该通知。例如对于一条 QQ 消息，点击会进入具体的聊天界面。</p><h2 id="notification-delete" tabindex="-1"><a class="header-anchor" href="#notification-delete"><span>Notification.delete()</span></a></h2><p>删除该通知。该通知将从通知栏中消失。</p><h1 id="keyevent" tabindex="-1"><a class="header-anchor" href="#keyevent"><span>KeyEvent</span></a></h1><blockquote><p>稳定性: 稳定</p></blockquote><h2 id="keyevent-getaction" tabindex="-1"><a class="header-anchor" href="#keyevent-getaction"><span>KeyEvent.getAction()</span></a></h2><p>返回事件的动作。包括：</p><ul><li><code>KeyEvent.ACTION_DOWN</code> 按下事件</li><li><code>KeyEvent.ACTION_UP</code> 弹起事件</li></ul><h2 id="keyevent-getkeycode" tabindex="-1"><a class="header-anchor" href="#keyevent-getkeycode"><span>KeyEvent.getKeyCode()</span></a></h2><p>返回按键的键值。包括：</p><ul><li><code>KeyEvent.KEYCODE_HOME</code> 主页键</li><li><code>KeyEvent.KEYCODE_BACK</code> 返回键</li><li><code>KeyEvent.KEYCODE_MENU</code> 菜单键</li><li><code>KeyEvent.KEYCODE_VOLUME_UP</code> 音量上键</li><li><code>KeyEvent.KEYCODE_VOLUME_DOWN</code> 音量下键</li></ul><h2 id="keyevent-geteventtime" tabindex="-1"><a class="header-anchor" href="#keyevent-geteventtime"><span>KeyEvent.getEventTime()</span></a></h2><ul><li>返回 {number}</li></ul><p>返回事件发生的时间戳。</p><h2 id="keyevent-getdowntime" tabindex="-1"><a class="header-anchor" href="#keyevent-getdowntime"><span>KeyEvent.getDownTime()</span></a></h2><p>返回最近一次按下事件的时间戳。如果本身是按下事件，则与<code>getEventTime()</code>相同。</p><h2 id="keyevent-keycodetostring-keycode" tabindex="-1"><a class="header-anchor" href="#keyevent-keycodetostring-keycode"><span>KeyEvent.keyCodeToString(keyCode)</span></a></h2><p>把键值转换为字符串。例如 KEYCODE_HOME 转换为&quot;KEYCODE_HOME&quot;。</p><h1 id="keys" tabindex="-1"><a class="header-anchor" href="#keys"><span>keys</span></a></h1><blockquote><p>稳定性: 稳定</p></blockquote><p>按键事件中所有可用的按键名称为：</p><ul><li><code>volume_up</code> 音量上键</li><li><code>volume_down</code> 音量下键</li><li><code>home</code> 主屏幕键</li><li><code>back</code> 返回键</li><li><code>menu</code> 菜单键</li></ul><h1 id="eventemitter" tabindex="-1"><a class="header-anchor" href="#eventemitter"><span>EventEmitter</span></a></h1><blockquote><p>稳定性: 稳定</p></blockquote><h2 id="eventemitter-defaultmaxlisteners" tabindex="-1"><a class="header-anchor" href="#eventemitter-defaultmaxlisteners"><span>EventEmitter.defaultMaxListeners</span></a></h2><p>每个事件默认可以注册最多 10 个监听器。 单个 EventEmitter 实例的限制可以使用 emitter.setMaxListeners(n) 方法改变。 所有 EventEmitter 实例的默认值可以使用 EventEmitter.defaultMaxListeners 属性改变。</p><p>设置 EventEmitter.defaultMaxListeners 要谨慎，因为会影响所有 EventEmitter 实例，包括之前创建的。 因而，调用 emitter.setMaxListeners(n) 优先于 EventEmitter.defaultMaxListeners。</p><p>注意，与 Node.js 不同，<strong>这是一个硬性限制</strong>。 EventEmitter 实例不允许添加更多的监听器，监听器超过最大数量时会抛出 TooManyListenersException。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>emitter<span class="token punctuation">.</span><span class="token function">setMaxListeners</span><span class="token punctuation">(</span>emitter<span class="token punctuation">.</span><span class="token function">getMaxListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 做些操作</span>
  emitter<span class="token punctuation">.</span><span class="token function">setMaxListeners</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>emitter<span class="token punctuation">.</span><span class="token function">getMaxListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-addlistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-addlistener-eventname-listener"><span>EventEmitter.addListener(eventName, listener)</span></a></h2><ul><li><code>eventName</code> {any}</li><li><code>listener</code> {Function}</li></ul><p>emitter.on(eventName, listener) 的别名。</p><h2 id="eventemitter-emit-eventname-args" tabindex="-1"><a class="header-anchor" href="#eventemitter-emit-eventname-args"><span>EventEmitter.emit(eventName[, ...args])</span></a></h2><ul><li><code>eventName</code> {any}</li><li><code>args</code> {any}</li></ul><p>按监听器的注册顺序，同步地调用每个注册到名为 eventName 事件的监听器，并传入提供的参数。</p><p>如果事件有监听器，则返回 true ，否则返回 false。</p><h2 id="eventemitter-eventnames" tabindex="-1"><a class="header-anchor" href="#eventemitter-eventnames"><span>EventEmitter.eventNames()</span></a></h2><p>返回一个列出触发器已注册监听器的事件的数组。 数组中的值为字符串或符号。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myEE <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;symbol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>sym<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myEE<span class="token punctuation">.</span><span class="token function">eventNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: [ &#39;foo&#39;, &#39;bar&#39;, Symbol(symbol) ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-getmaxlisteners" tabindex="-1"><a class="header-anchor" href="#eventemitter-getmaxlisteners"><span>EventEmitter.getMaxListeners()</span></a></h2><p>返回 EventEmitter 当前的最大监听器限制值，该值可以通过 emitter.setMaxListeners(n) 设置或默认为 EventEmitter.defaultMaxListeners。</p><h2 id="eventemitter-listenercount-eventname" tabindex="-1"><a class="header-anchor" href="#eventemitter-listenercount-eventname"><span>EventEmitter.listenerCount(eventName)</span></a></h2><ul><li><code>eventName</code> {string} 正在被监听的事件名</li></ul><p>返回正在监听名为 eventName 的事件的监听器的数量。</p><h2 id="eventemitter-listeners-eventname" tabindex="-1"><a class="header-anchor" href="#eventemitter-listeners-eventname"><span>EventEmitter.listeners(eventName)</span></a></h2><ul><li><code>eventName</code> {string}</li></ul><p>返回名为 eventName 的事件的监听器数组的副本。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;someone connected!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>server<span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: [ [Function] ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-on-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-on-eventname-listener"><span>EventEmitter.on(eventName, listener)</span></a></h2><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加 listener 函数到名为 eventName 的事件的监听器数组的末尾。 不会检查 listener 是否已被添加。 多次调用并传入相同的 eventName 和 listener 会导致 listener 被添加与调用多次。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有连接！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回一个 EventEmitter 引用，可以链式调用。</p><p>默认情况下，事件监听器会按照添加的顺序依次调用。 emitter.prependListener() 方法可用于将事件监听器添加到监听器数组的开头。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myEE <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">prependListener</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印:</span>
<span class="token comment">//   b</span>
<span class="token comment">//   a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-once-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-once-eventname-listener"><span>EventEmitter.once(eventName, listener)</span></a></h2><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加一个单次 listener 函数到名为 eventName 的事件。 下次触发 eventName 事件时，监听器会被移除，然后调用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;首次调用！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回一个 EventEmitter 引用，可以链式调用。</p><p>默认情况下，事件监听器会按照添加的顺序依次调用。 emitter.prependOnceListener() 方法可用于将事件监听器添加到监听器数组的开头。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myEE <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">prependOnceListener</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myEE<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印:</span>
<span class="token comment">//   b</span>
<span class="token comment">//   a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eventemitter-prependlistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-prependlistener-eventname-listener"><span>EventEmitter.prependListener(eventName, listener)</span></a></h2><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加 listener 函数到名为 eventName 的事件的监听器数组的开头。 不会检查 listener 是否已被添加。 多次调用并传入相同的 eventName 和 listener 会导致 listener 被添加与调用多次。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">prependListener</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有连接！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回一个 EventEmitter 引用，可以链式调用。</p><h2 id="eventemitter-prependoncelistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-prependoncelistener-eventname-listener"><span>EventEmitter.prependOnceListener(eventName, listener)</span></a></h2><ul><li><code>eventName</code> {any} 事件名</li><li><code>listener</code> {Function} 回调函数</li></ul><p>添加一个单次 listener 函数到名为 eventName 的事件的监听器数组的开头。 下次触发 eventName 事件时，监听器会被移除，然后调用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">prependOnceListener</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;首次调用！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回一个 EventEmitter 引用，可以链式调用。</p><h2 id="eventemitter-removealllisteners-eventname" tabindex="-1"><a class="header-anchor" href="#eventemitter-removealllisteners-eventname"><span>EventEmitter.removeAllListeners([eventName])</span></a></h2><ul><li><code>eventName</code> {any}</li></ul><p>移除全部或指定 eventName 的监听器。</p><p>注意，在代码中移除其他地方添加的监听器是一个不好的做法，尤其是当 EventEmitter 实例是其他组件或模块创建的。</p><p>返回一个 EventEmitter 引用，可以链式调用。</p><h2 id="eventemitter-removelistener-eventname-listener" tabindex="-1"><a class="header-anchor" href="#eventemitter-removelistener-eventname-listener"><span>EventEmitter.removeListener(eventName, listener)</span></a></h2><ul><li><code>eventName</code> {any}</li><li><code>listener</code> {Function}</li></ul><p>从名为 eventName 的事件的监听器数组中移除指定的 listener。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;有连接！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
server<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&quot;connection&quot;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>removeListener 最多只会从监听器数组里移除一个监听器实例。 如果任何单一的监听器被多次添加到指定 eventName 的监听器数组中，则必须多次调用 removeListener 才能移除每个实例。</p><p>注意，一旦一个事件被触发，所有绑定到它的监听器都会按顺序依次触发。 这意味着，在事件触发后、最后一个监听器完成执行前，任何 removeListener() 或 removeAllListeners() 调用都不会从 emit() 中移除它们。 随后的事件会像预期的那样发生。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myEmitter <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">emitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">callbackA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  myEmitter<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">,</span> callbackB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">callbackB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">,</span> callbackA<span class="token punctuation">)</span><span class="token punctuation">;</span>

myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">,</span> callbackB<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// callbackA 移除了监听器 callbackB，但它依然会被调用。</span>
<span class="token comment">// 触发是内部的监听器数组为 [callbackA, callbackB]</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印:</span>
<span class="token comment">//   A</span>
<span class="token comment">//   B</span>

<span class="token comment">// callbackB 被移除了。</span>
<span class="token comment">// 内部监听器数组为 [callbackA]</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;event&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印:</span>
<span class="token comment">//   A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为监听器是使用内部数组进行管理的，所以调用它会改变在监听器被移除后注册的任何监听器的位置索引。 虽然这不会影响监听器的调用顺序，但意味着由 emitter.listeners() 方法返回的监听器数组副本需要被重新创建。</p><p>返回一个 EventEmitter 引用，可以链式调用。</p><h2 id="eventemitter-setmaxlisteners-n" tabindex="-1"><a class="header-anchor" href="#eventemitter-setmaxlisteners-n"><span>EventEmitter.setMaxListeners(n)</span></a></h2><ul><li><code>n</code> {number}</li></ul><p>默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 此限制有助于寻找内存泄露。 但是，并不是所有的事件都要被限为 10 个。 emitter.setMaxListeners() 方法允许修改指定的 EventEmitter 实例的限制。 值设为 Infinity（或 0）表明不限制监听器的数量。</p><p>返回一个 EventEmitter 引用，可以链式调用。</p><h1 id="events-broadcast" tabindex="-1"><a class="header-anchor" href="#events-broadcast"><span>events.broadcast</span></a></h1><p>脚本间广播</p><p>脚本间通信除了使用 engines 模块提供的<code>ScriptEngine.emit()</code>方法以外，也可以使用 events 模块提供的 broadcast 广播。</p><p>events.broadcast 本身是一个 EventEmitter，但它的事件是在脚本间共享的，所有脚本都能发送和监听这些事件；事件处理会在脚本主线程执行（后续可能加入函数<code>onThisThread(eventName, ...args)</code>来提供在其他线程执行的能力）。</p><p>例如在一个脚本发送一个广播 hello:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在其他脚本中监听并处理：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">toast</span><span class="token punctuation">(</span><span class="token string">&quot;你好, &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//保持脚本运行</span>
<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,160);function h(b,g){const p=a("Badge"),o=a("RouteLink");return c(),l("div",null,[k,e(p,{type:"tip",text:"稳定",vertical:"middle"}),d,n("ul",null,[n("li",null,[v,s(" {Function} 参数为"),e(o,{to:"/images.html#images_point"},{default:u(()=>[s("Point")]),_:1}),s("的函数")])]),m])}const f=i(r,[["render",h],["__file","events.html.vue"]]),E=JSON.parse(`{"path":"/events.html","title":"事件与监听-events","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"events.emitter()","slug":"events-emitter","link":"#events-emitter","children":[]},{"level":2,"title":"events.observeKey()","slug":"events-observekey","link":"#events-observekey","children":[]},{"level":2,"title":"events.onKeyDown(keyName, listener)","slug":"events-onkeydown-keyname-listener","link":"#events-onkeydown-keyname-listener","children":[]},{"level":2,"title":"events.onKeyUp(keyName, listener)","slug":"events-onkeyup-keyname-listener","link":"#events-onkeyup-keyname-listener","children":[]},{"level":2,"title":"events.onceKeyDown(keyName, listener)","slug":"events-oncekeydown-keyname-listener","link":"#events-oncekeydown-keyname-listener","children":[]},{"level":2,"title":"events.onceKeyUp(keyName, listener)","slug":"events-oncekeyup-keyname-listener","link":"#events-oncekeyup-keyname-listener","children":[]},{"level":2,"title":"events.removeAllKeyDownListeners(keyName)","slug":"events-removeallkeydownlisteners-keyname","link":"#events-removeallkeydownlisteners-keyname","children":[]},{"level":2,"title":"events.removeAllKeyUpListeners(keyName)","slug":"events-removeallkeyuplisteners-keyname","link":"#events-removeallkeyuplisteners-keyname","children":[]},{"level":2,"title":"events.setKeyInterceptionEnabled([key, ]enabled)","slug":"events-setkeyinterceptionenabled-key-enabled","link":"#events-setkeyinterceptionenabled-key-enabled","children":[]},{"level":2,"title":"events.observeTouch()","slug":"events-observetouch","link":"#events-observetouch","children":[]},{"level":2,"title":"events.setTouchEventTimeout(timeout)","slug":"events-settoucheventtimeout-timeout","link":"#events-settoucheventtimeout-timeout","children":[]},{"level":2,"title":"events.getTouchEventTimeout()","slug":"events-gettoucheventtimeout","link":"#events-gettoucheventtimeout","children":[]},{"level":2,"title":"events.onTouch(listener)","slug":"events-ontouch-listener","link":"#events-ontouch-listener","children":[]},{"level":2,"title":"events.removeAllTouchListeners()","slug":"events-removealltouchlisteners","link":"#events-removealltouchlisteners","children":[]},{"level":2,"title":"事件: 'key'","slug":"事件-key","link":"#事件-key","children":[]},{"level":2,"title":"事件: 'key_down'","slug":"事件-key-down","link":"#事件-key-down","children":[]},{"level":2,"title":"事件: 'key_up'","slug":"事件-key-up","link":"#事件-key-up","children":[]},{"level":2,"title":"事件: 'exit\`","slug":"事件-exit","link":"#事件-exit","children":[]},{"level":2,"title":"events.observeNotification()","slug":"events-observenotification","link":"#events-observenotification","children":[]},{"level":2,"title":"events.observeToast()","slug":"events-observetoast","link":"#events-observetoast","children":[]},{"level":2,"title":"事件: 'toast'","slug":"事件-toast","link":"#事件-toast","children":[]},{"level":2,"title":"事件: 'notification'","slug":"事件-notification","link":"#事件-notification","children":[]},{"level":2,"title":"Notification.number","slug":"notification-number","link":"#notification-number","children":[]},{"level":2,"title":"Notification.when","slug":"notification-when","link":"#notification-when","children":[]},{"level":2,"title":"Notification.getPackageName()","slug":"notification-getpackagename","link":"#notification-getpackagename","children":[]},{"level":2,"title":"Notification.getTitle()","slug":"notification-gettitle","link":"#notification-gettitle","children":[]},{"level":2,"title":"Notification.getText()","slug":"notification-gettext","link":"#notification-gettext","children":[]},{"level":2,"title":"Notification.click()","slug":"notification-click","link":"#notification-click","children":[]},{"level":2,"title":"Notification.delete()","slug":"notification-delete","link":"#notification-delete","children":[]},{"level":2,"title":"KeyEvent.getAction()","slug":"keyevent-getaction","link":"#keyevent-getaction","children":[]},{"level":2,"title":"KeyEvent.getKeyCode()","slug":"keyevent-getkeycode","link":"#keyevent-getkeycode","children":[]},{"level":2,"title":"KeyEvent.getEventTime()","slug":"keyevent-geteventtime","link":"#keyevent-geteventtime","children":[]},{"level":2,"title":"KeyEvent.getDownTime()","slug":"keyevent-getdowntime","link":"#keyevent-getdowntime","children":[]},{"level":2,"title":"KeyEvent.keyCodeToString(keyCode)","slug":"keyevent-keycodetostring-keycode","link":"#keyevent-keycodetostring-keycode","children":[]},{"level":2,"title":"EventEmitter.defaultMaxListeners","slug":"eventemitter-defaultmaxlisteners","link":"#eventemitter-defaultmaxlisteners","children":[]},{"level":2,"title":"EventEmitter.addListener(eventName, listener)","slug":"eventemitter-addlistener-eventname-listener","link":"#eventemitter-addlistener-eventname-listener","children":[]},{"level":2,"title":"EventEmitter.emit(eventName[, ...args])","slug":"eventemitter-emit-eventname-args","link":"#eventemitter-emit-eventname-args","children":[]},{"level":2,"title":"EventEmitter.eventNames()","slug":"eventemitter-eventnames","link":"#eventemitter-eventnames","children":[]},{"level":2,"title":"EventEmitter.getMaxListeners()","slug":"eventemitter-getmaxlisteners","link":"#eventemitter-getmaxlisteners","children":[]},{"level":2,"title":"EventEmitter.listenerCount(eventName)","slug":"eventemitter-listenercount-eventname","link":"#eventemitter-listenercount-eventname","children":[]},{"level":2,"title":"EventEmitter.listeners(eventName)","slug":"eventemitter-listeners-eventname","link":"#eventemitter-listeners-eventname","children":[]},{"level":2,"title":"EventEmitter.on(eventName, listener)","slug":"eventemitter-on-eventname-listener","link":"#eventemitter-on-eventname-listener","children":[]},{"level":2,"title":"EventEmitter.once(eventName, listener)","slug":"eventemitter-once-eventname-listener","link":"#eventemitter-once-eventname-listener","children":[]},{"level":2,"title":"EventEmitter.prependListener(eventName, listener)","slug":"eventemitter-prependlistener-eventname-listener","link":"#eventemitter-prependlistener-eventname-listener","children":[]},{"level":2,"title":"EventEmitter.prependOnceListener(eventName, listener)","slug":"eventemitter-prependoncelistener-eventname-listener","link":"#eventemitter-prependoncelistener-eventname-listener","children":[]},{"level":2,"title":"EventEmitter.removeAllListeners([eventName])","slug":"eventemitter-removealllisteners-eventname","link":"#eventemitter-removealllisteners-eventname","children":[]},{"level":2,"title":"EventEmitter.removeListener(eventName, listener)","slug":"eventemitter-removelistener-eventname-listener","link":"#eventemitter-removelistener-eventname-listener","children":[]},{"level":2,"title":"EventEmitter.setMaxListeners(n)","slug":"eventemitter-setmaxlisteners-n","link":"#eventemitter-setmaxlisteners-n","children":[]}],"git":{"updatedTime":1713029763000,"contributors":[{"name":"Lin","email":"yditmxpev@mozmail.com","commits":1}]},"filePathRelative":"events.md"}`);export{f as comp,E as data};
