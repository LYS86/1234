import{_ as n,r as s,o as t,c as i,d as l,a as e,e as p}from"./app-OPVVCiFa.js";const o={},c=e("h1",{id:"文件系统-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#文件系统-files"},[e("span",null,"文件系统-files")])],-1),d=p(`<p>files 模块提供了一些常见的文件处理，包括文件读写、移动、复制、删掉等。</p><p>一次性的文件读写可以直接使用<code>files.read()</code>, <code>files.write()</code>, <code>files.append()</code>等方便的函数，但如果需要频繁读写或随机读写，则使用<code>open()</code>函数打开一个文件对象来操作文件，并在操作完毕后调用<code>close()</code>函数关闭文件。</p><h2 id="files-isfile-path" tabindex="-1"><a class="header-anchor" href="#files-isfile-path"><span>files.isFile(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>返回路径 path 是否是文件。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/文件夹/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回false</span>
<span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/文件.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-isdir-path" tabindex="-1"><a class="header-anchor" href="#files-isdir-path"><span>files.isDir(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>返回路径 path 是否是文件夹。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/文件夹/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回true</span>
<span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/文件.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-isemptydir-path" tabindex="-1"><a class="header-anchor" href="#files-isemptydir-path"><span>files.isEmptyDir(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>返回文件夹 path 是否为空文件夹。如果该路径并非文件夹，则直接返回<code>false</code>。</p><h2 id="files-join-parent-child" tabindex="-1"><a class="header-anchor" href="#files-join-parent-child"><span>files.join(parent, child)</span></a></h2><ul><li><code>parent</code> {string} 父目录路径</li><li><code>child</code> {string} 子路径</li><li><code>return</code> {string}</li></ul><p>连接两个路径并返回，例如<code>files.join(&quot;/sdcard/&quot;, &quot;1.txt&quot;)</code>返回&quot;/sdcard/1.txt&quot;。</p><h2 id="files-create-path" tabindex="-1"><a class="header-anchor" href="#files-create-path"><span>files.create(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>创建一个文件或文件夹并返回是否创建成功。如果文件已经存在，则直接返回<code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>files<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/新文件夹/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="files-createwithdirs-path" tabindex="-1"><a class="header-anchor" href="#files-createwithdirs-path"><span>files.createWithDirs(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>创建一个文件或文件夹并返回是否创建成功。如果文件所在文件夹不存在，则先创建他所在的一系列文件夹。如果文件已经存在，则直接返回<code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>files<span class="token punctuation">.</span><span class="token function">createWithDirs</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/新文件夹/新文件夹/新文件夹/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="files-exists-path" tabindex="-1"><a class="header-anchor" href="#files-exists-path"><span>files.exists(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>返回在路径 path 处的文件是否存在。</p><h2 id="files-ensuredir-path" tabindex="-1"><a class="header-anchor" href="#files-ensuredir-path"><span>files.ensureDir(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li></ul><p>确保路径 path 所在的文件夹存在。如果该路径所在文件夹不存在，则创建该文件夹。</p><p>例如对于路径&quot;/sdcard/Download/ABC/1.txt&quot;，如果/Download/文件夹不存在，则会先创建 Download，再创建 ABC 文件夹。</p><h2 id="files-read-path-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-read-path-encoding-utf-8"><span>files.read(path[, encoding = &quot;utf-8&quot;])</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>encoding</code> {string} 字符编码，可选，默认为 utf-8</li><li><code>return</code> {string}</li></ul><p>读取文本文件 path 的所有内容并返回。如果文件不存在，则抛出<code>FileNotFoundException</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="files-readbytes-path" tabindex="-1"><a class="header-anchor" href="#files-readbytes-path"><span>files.readBytes(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {byte[]}</li></ul><p>读取文件 path 的所有内容并返回一个字节数组。如果文件不存在，则抛出<code>FileNotFoundException</code>。</p><p>注意，该数组是 Java 的数组，不具有 JavaScript 数组的 forEach, slice 等函数。</p><p>一个以 16 进制形式打印文件的例子如下:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">log</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-write-path-text-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-write-path-text-encoding-utf-8"><span>files.write(path, text[, encoding = &quot;utf-8&quot;])</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>text</code> {string} 要写入的文本内容</li><li><code>encoding</code> {string} 字符编码</li></ul><p>把 text 写入到文件 path 中。如果文件存在则覆盖，不存在则创建。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&quot;文件内容&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//写入文件</span>
files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//用其他应用查看文件</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-writebytes-path-bytes" tabindex="-1"><a class="header-anchor" href="#files-writebytes-path-bytes"><span>files.writeBytes(path, bytes)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>bytes</code> {byte[]} 字节数组，要写入的二进制数据</li></ul><p>把 bytes 写入到文件 path 中。如果文件存在则覆盖，不存在则创建。</p><h2 id="files-append-path-text-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-append-path-text-encoding-utf-8"><span>files.append(path, text[, encoding = &#39;utf-8&#39;])</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>text</code> {string} 要写入的文本内容</li><li><code>encoding</code> {string} 字符编码</li></ul><p>把 text 追加到文件 path 的末尾。如果文件不存在则创建。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">&quot;追加的文件内容&quot;</span><span class="token punctuation">;</span>
files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
files<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//用其他应用查看文件</span>
app<span class="token punctuation">.</span><span class="token function">viewFile</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files-appendbytes-path-bytes-encoding-utf-8" tabindex="-1"><a class="header-anchor" href="#files-appendbytes-path-bytes-encoding-utf-8"><span>files.appendBytes(path, bytes[, encoding = &#39;utf-8&#39;])</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>bytes</code> {byte[]} 字节数组，要写入的二进制数据</li><li><code>encoding</code> {string} 字符编码</li></ul><p>把 bytes 追加到文件 path 的末尾。如果文件不存在则创建。</p><h2 id="files-copy-frompath-topath" tabindex="-1"><a class="header-anchor" href="#files-copy-frompath-topath"><span>files.copy(fromPath, toPath)</span></a></h2><ul><li><code>fromPath</code> {string} 要复制的原文件路径</li><li><code>toPath</code> {string} 复制到的文件路径</li><li><code>return</code> {boolean}</li></ul><p>复制文件，返回是否复制成功。例如<code>files.copy(&quot;/sdcard/1.txt&quot;, &quot;/sdcard/Download/1.txt&quot;)</code>。</p><h2 id="files-move-frompath-topath" tabindex="-1"><a class="header-anchor" href="#files-move-frompath-topath"><span>files.move(fromPath, toPath)</span></a></h2><ul><li><code>fromPath</code> {string} 要移动的原文件路径</li><li><code>toPath</code> {string} 移动到的文件路径</li><li><code>return</code> {boolean}</li></ul><p>移动文件，返回是否移动成功。例如<code>files.move(&quot;/sdcard/1.txt&quot;, &quot;/sdcard/Download/1.txt&quot;)</code>会把 1.txt 文件从 sd 卡根目录移动到 Download 文件夹。</p><h2 id="files-rename-path-newname" tabindex="-1"><a class="header-anchor" href="#files-rename-path-newname"><span>files.rename(path, newName)</span></a></h2><ul><li><code>path</code> {string} 要重命名的原文件路径</li><li><code>newName</code> {string} 要重命名的新文件名</li><li><code>return</code> {boolean}</li></ul><p>重命名文件，并返回是否重命名成功。例如<code>files.rename(&quot;/sdcard/1.txt&quot;, &quot;2.txt&quot;)</code>。</p><h2 id="files-renamewithoutextension-path-newname" tabindex="-1"><a class="header-anchor" href="#files-renamewithoutextension-path-newname"><span>files.renameWithoutExtension(path, newName)</span></a></h2><ul><li><code>path</code> {string} 要重命名的原文件路径</li><li><code>newName</code> {string} 要重命名的新文件名</li><li><code>return</code> {boolean}</li></ul><p>重命名文件，不包含拓展名，并返回是否重命名成功。例如<code>files.rename(&quot;/sdcard/1.txt&quot;, &quot;2&quot;)</code>会把&quot;1.txt&quot;重命名为&quot;2.txt&quot;。</p><h2 id="files-getname-path" tabindex="-1"><a class="header-anchor" href="#files-getname-path"><span>files.getName(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {string}</li></ul><p>返回文件的文件名。例如<code>files.getName(&quot;/sdcard/1.txt&quot;)</code>返回&quot;1.txt&quot;。</p><h2 id="files-getnamewithoutextension-path" tabindex="-1"><a class="header-anchor" href="#files-getnamewithoutextension-path"><span>files.getNameWithoutExtension(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {string}</li></ul><p>返回不含拓展名的文件的文件名。例如<code>files.getName(&quot;/sdcard/1.txt&quot;)</code>返回&quot;1&quot;。</p><h2 id="files-getextension-path" tabindex="-1"><a class="header-anchor" href="#files-getextension-path"><span>files.getExtension(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {string}</li></ul><p>返回文件的拓展名。例如<code>files.getExtension(&quot;/sdcard/1.txt&quot;)</code>返回&quot;txt&quot;。</p><h2 id="files-remove-path" tabindex="-1"><a class="header-anchor" href="#files-remove-path"><span>files.remove(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>删除文件或<strong>空文件夹</strong>，返回是否删除成功。</p><h2 id="files-removedir-path" tabindex="-1"><a class="header-anchor" href="#files-removedir-path"><span>files.removeDir(path)</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>return</code> {boolean}</li></ul><p>删除文件夹，如果文件夹不为空，则删除该文件夹的所有内容再删除该文件夹，返回是否全部删除成功。</p><h2 id="files-getsdcardpath" tabindex="-1"><a class="header-anchor" href="#files-getsdcardpath"><span>files.getSdcardPath()</span></a></h2><ul><li><code>return</code> {string}</li></ul><p>返回 SD 卡路径。所谓 SD 卡，即外部存储器。</p><h2 id="files-cwd" tabindex="-1"><a class="header-anchor" href="#files-cwd"><span>files.cwd()</span></a></h2><ul><li><code>return</code> {string}</li></ul><p>返回脚本的&quot;当前工作文件夹路径&quot;。该路径指的是，如果脚本本身为脚本文件，则返回这个脚本文件所在目录；否则返回<code>null</code>获取其他设定路径。</p><p>例如，对于脚本文件&quot;/sdcard/脚本/1.js&quot;运行<code>files.cwd()</code>返回&quot;/sdcard/脚本/&quot;。</p><h2 id="files-path-relativepath" tabindex="-1"><a class="header-anchor" href="#files-path-relativepath"><span>files.path(relativePath)</span></a></h2><ul><li><code>relativePath</code> {string} 相对路径</li><li><code>return</code> {string}</li></ul><p>返回相对路径对应的绝对路径。例如<code>files.path(&quot;./1.png&quot;)</code>，如果运行这个语句的脚本位于文件夹&quot;/sdcard/脚本/&quot;中，则返回<code>&quot;/sdcard/脚本/1.png&quot;</code>。</p><h2 id="files-listdir-path-filter" tabindex="-1"><a class="header-anchor" href="#files-listdir-path-filter"><span>files.listDir(path[, filter])</span></a></h2><ul><li><code>path</code> {string} 路径</li><li><code>filter</code> {Function} 过滤函数，可选。接收一个<code>string</code>参数（文件名），返回一个<code>boolean</code>值。</li></ul><p>列出文件夹 path 下的满足条件的文件和文件夹的名称的数组。如果不加 filter 参数，则返回所有文件和文件夹。</p><p>列出 sdcard 目录下所有文件和文件夹为:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">listDir</span><span class="token punctuation">(</span><span class="token string">&quot;/sdcard/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>列出脚本目录下所有 js 脚本文件为:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dir <span class="token operator">=</span> <span class="token string">&quot;/sdcard/脚本/&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> jsFiles <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">listDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> files<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span>files<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">log</span><span class="token punctuation">(</span>jsFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="open-path-mode-r-encoding-utf-8-buffersize-8192" tabindex="-1"><a class="header-anchor" href="#open-path-mode-r-encoding-utf-8-buffersize-8192"><span>open(path[, mode = &quot;r&quot;, encoding = &quot;utf-8&quot;, bufferSize = 8192])</span></a></h2><ul><li><code>path</code> {string} 文件路径，例如&quot;/sdcard/1.txt&quot;。</li><li><code>mode</code> {string} 文件打开模式，包括: <ul><li><code>r</code>: 只读文本模式。该模式下只能对文件执行<strong>文本</strong>读取操作。</li><li><code>w</code>: 只写文本模式。该模式下只能对文件执行<strong>文本</strong>覆盖写入操作。</li><li><code>a</code>: 附加文本模式。该模式下将会把写入的文本附加到文件末尾。</li><li><code>rw</code>: 随机读写文本模式。该模式下将会把写入的文本附加到文件末尾。<br> 目前暂不支持二进制模式，随机读写模式。</li></ul></li><li><code>encoding</code> {string} 字符编码。</li><li><code>bufferSize</code> {number} 文件读写的缓冲区大小。</li></ul><p>打开一个文件。根据打开模式返回不同的文件对象。包括：</p><ul><li><code>r</code>: 返回一个 <a href="#readabletextfile">ReadableTextFile</a> 对象。</li><li><code>w</code>, <code>a</code>: 返回一个 <a href="#writabletextfile">WritableTextFile</a> 对象。</li></ul><p>对于&quot;w&quot;模式，如果文件并不存在，则会创建一个，已存在则会清空该文件内容；其他模式文件不存在会抛出 FileNotFoundException。</p><h1 id="readabletextfile" tabindex="-1"><a class="header-anchor" href="#readabletextfile"><span>ReadableTextFile</span></a></h1><p>可读文件对象。</p><h2 id="readabletextfile-read" tabindex="-1"><a class="header-anchor" href="#readabletextfile-read"><span>ReadableTextFile.read()</span></a></h2><p>返回该文件剩余的所有内容的字符串。</p><h2 id="readabletextfile-read-maxcount" tabindex="-1"><a class="header-anchor" href="#readabletextfile-read-maxcount"><span>ReadableTextFile.read(maxCount)</span></a></h2><ul><li><code>maxCount</code> {Number} 最大读取的字符数量</li></ul><p>读取该文件接下来最长为 maxCount 的字符串并返回。即使文件剩余内容不足 maxCount 也不会出错。</p><h2 id="readabletextfile-readline" tabindex="-1"><a class="header-anchor" href="#readabletextfile-readline"><span>ReadableTextFile.readline()</span></a></h2><p>读取一行并返回（不包含换行符）。</p><h2 id="readabletextfile-readlines" tabindex="-1"><a class="header-anchor" href="#readabletextfile-readlines"><span>ReadableTextFile.readlines()</span></a></h2><p>读取剩余的所有行，并返回它们按顺序组成的字符串数组。</p><h2 id="close" tabindex="-1"><a class="header-anchor" href="#close"><span>close()</span></a></h2><p>关闭该文件。</p><p><strong>打开一个文件不再使用时务必关闭</strong></p><h1 id="writabletextfile" tabindex="-1"><a class="header-anchor" href="#writabletextfile"><span>WritableTextFile</span></a></h1><p>可写文件对象。</p><h2 id="writabletextfile-write-text" tabindex="-1"><a class="header-anchor" href="#writabletextfile-write-text"><span>WritableTextFile.write(text)</span></a></h2><ul><li><code>text</code> {string} 文本</li></ul><p>把文本内容 text 写入到文件中。</p><h2 id="writabletextfile-writeline-line" tabindex="-1"><a class="header-anchor" href="#writabletextfile-writeline-line"><span>WritableTextFile.writeline(line)</span></a></h2><ul><li><code>text</code> {string} 文本</li></ul><p>把文本 line 写入到文件中并写入一个换行符。</p><h2 id="writabletextfile-writelines-lines" tabindex="-1"><a class="header-anchor" href="#writabletextfile-writelines-lines"><span>WritableTextFile.writelines(lines)</span></a></h2><ul><li><code>lines</code> {Array} 字符串数组</li></ul><p>把很多行写入到文件中....</p><h2 id="writabletextfile-flush" tabindex="-1"><a class="header-anchor" href="#writabletextfile-flush"><span>WritableTextFile.flush()</span></a></h2><p>把缓冲区内容输出到文件中。</p><h2 id="writabletextfile-close" tabindex="-1"><a class="header-anchor" href="#writabletextfile-close"><span>WritableTextFile.close()</span></a></h2><p>关闭文件。同时会被缓冲区内容输出到文件。</p><p><strong>打开一个文件写入后，不再使用时务必关闭，否则文件可能会丢失</strong></p>`,134);function r(u,h){const a=s("Badge");return t(),i("div",null,[c,l(a,{type:"tip",text:"稳定",vertical:"middle"}),d])}const k=n(o,[["render",r],["__file","files.html.vue"]]),g=JSON.parse(`{"path":"/files.html","title":"文件系统-files","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"files.isFile(path)","slug":"files-isfile-path","link":"#files-isfile-path","children":[]},{"level":2,"title":"files.isDir(path)","slug":"files-isdir-path","link":"#files-isdir-path","children":[]},{"level":2,"title":"files.isEmptyDir(path)","slug":"files-isemptydir-path","link":"#files-isemptydir-path","children":[]},{"level":2,"title":"files.join(parent, child)","slug":"files-join-parent-child","link":"#files-join-parent-child","children":[]},{"level":2,"title":"files.create(path)","slug":"files-create-path","link":"#files-create-path","children":[]},{"level":2,"title":"files.createWithDirs(path)","slug":"files-createwithdirs-path","link":"#files-createwithdirs-path","children":[]},{"level":2,"title":"files.exists(path)","slug":"files-exists-path","link":"#files-exists-path","children":[]},{"level":2,"title":"files.ensureDir(path)","slug":"files-ensuredir-path","link":"#files-ensuredir-path","children":[]},{"level":2,"title":"files.read(path[, encoding = \\"utf-8\\"])","slug":"files-read-path-encoding-utf-8","link":"#files-read-path-encoding-utf-8","children":[]},{"level":2,"title":"files.readBytes(path)","slug":"files-readbytes-path","link":"#files-readbytes-path","children":[]},{"level":2,"title":"files.write(path, text[, encoding = \\"utf-8\\"])","slug":"files-write-path-text-encoding-utf-8","link":"#files-write-path-text-encoding-utf-8","children":[]},{"level":2,"title":"files.writeBytes(path, bytes)","slug":"files-writebytes-path-bytes","link":"#files-writebytes-path-bytes","children":[]},{"level":2,"title":"files.append(path, text[, encoding = 'utf-8'])","slug":"files-append-path-text-encoding-utf-8","link":"#files-append-path-text-encoding-utf-8","children":[]},{"level":2,"title":"files.appendBytes(path, bytes[, encoding = 'utf-8'])","slug":"files-appendbytes-path-bytes-encoding-utf-8","link":"#files-appendbytes-path-bytes-encoding-utf-8","children":[]},{"level":2,"title":"files.copy(fromPath, toPath)","slug":"files-copy-frompath-topath","link":"#files-copy-frompath-topath","children":[]},{"level":2,"title":"files.move(fromPath, toPath)","slug":"files-move-frompath-topath","link":"#files-move-frompath-topath","children":[]},{"level":2,"title":"files.rename(path, newName)","slug":"files-rename-path-newname","link":"#files-rename-path-newname","children":[]},{"level":2,"title":"files.renameWithoutExtension(path, newName)","slug":"files-renamewithoutextension-path-newname","link":"#files-renamewithoutextension-path-newname","children":[]},{"level":2,"title":"files.getName(path)","slug":"files-getname-path","link":"#files-getname-path","children":[]},{"level":2,"title":"files.getNameWithoutExtension(path)","slug":"files-getnamewithoutextension-path","link":"#files-getnamewithoutextension-path","children":[]},{"level":2,"title":"files.getExtension(path)","slug":"files-getextension-path","link":"#files-getextension-path","children":[]},{"level":2,"title":"files.remove(path)","slug":"files-remove-path","link":"#files-remove-path","children":[]},{"level":2,"title":"files.removeDir(path)","slug":"files-removedir-path","link":"#files-removedir-path","children":[]},{"level":2,"title":"files.getSdcardPath()","slug":"files-getsdcardpath","link":"#files-getsdcardpath","children":[]},{"level":2,"title":"files.cwd()","slug":"files-cwd","link":"#files-cwd","children":[]},{"level":2,"title":"files.path(relativePath)","slug":"files-path-relativepath","link":"#files-path-relativepath","children":[]},{"level":2,"title":"files.listDir(path[, filter])","slug":"files-listdir-path-filter","link":"#files-listdir-path-filter","children":[]},{"level":2,"title":"open(path[, mode = \\"r\\", encoding = \\"utf-8\\", bufferSize = 8192])","slug":"open-path-mode-r-encoding-utf-8-buffersize-8192","link":"#open-path-mode-r-encoding-utf-8-buffersize-8192","children":[]},{"level":2,"title":"ReadableTextFile.read()","slug":"readabletextfile-read","link":"#readabletextfile-read","children":[]},{"level":2,"title":"ReadableTextFile.read(maxCount)","slug":"readabletextfile-read-maxcount","link":"#readabletextfile-read-maxcount","children":[]},{"level":2,"title":"ReadableTextFile.readline()","slug":"readabletextfile-readline","link":"#readabletextfile-readline","children":[]},{"level":2,"title":"ReadableTextFile.readlines()","slug":"readabletextfile-readlines","link":"#readabletextfile-readlines","children":[]},{"level":2,"title":"close()","slug":"close","link":"#close","children":[]},{"level":2,"title":"WritableTextFile.write(text)","slug":"writabletextfile-write-text","link":"#writabletextfile-write-text","children":[]},{"level":2,"title":"WritableTextFile.writeline(line)","slug":"writabletextfile-writeline-line","link":"#writabletextfile-writeline-line","children":[]},{"level":2,"title":"WritableTextFile.writelines(lines)","slug":"writabletextfile-writelines-lines","link":"#writabletextfile-writelines-lines","children":[]},{"level":2,"title":"WritableTextFile.flush()","slug":"writabletextfile-flush","link":"#writabletextfile-flush","children":[]},{"level":2,"title":"WritableTextFile.close()","slug":"writabletextfile-close","link":"#writabletextfile-close","children":[]}],"git":{"updatedTime":1713029763000,"contributors":[{"name":"Lin","email":"yditmxpev@mozmail.com","commits":1}]},"filePathRelative":"files.md"}`);export{k as comp,g as data};
