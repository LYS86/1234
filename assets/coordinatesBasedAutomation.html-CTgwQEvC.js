import{_ as t,r as o,o as e,c as p,d as a,e as s}from"./app-CJv-W2Gj.js";const c={},i=s(`<p>本章节介绍了一些使用坐标进行点击、滑动的函数。<br> 要获取要点击的位置的坐标，可以在开发者选项中开启&quot;指针位置&quot;。<br> 基于坐标的脚本通常会有分辨率的问题，这时可以通过<code>setScreenMetrics()</code>函数来进行自动坐标放缩。 这个函数会影响本章节的所有点击、长按、滑动等函数。通过设定脚本设计时的分辨率，使得脚本在其他分辨率下自动放缩坐标。</p><p>控件和坐标也可以相互结合。一些控件是无法点击的(clickable 为 false), 无法通过<code>.click()</code>函数来点击，这时如果安卓版本在 7.0 以上或者有 root 权限，就可以通过以下方式来点击：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//获取这个控件</span>
<span class="token keyword">var</span> widget <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取其中心位置并点击</span>
<span class="token function">click</span><span class="token punctuation">(</span>widget<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> widget<span class="token punctuation">.</span><span class="token function">bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果用root权限则用Tap</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="setscreenmetrics-width-height" tabindex="-1"><a class="header-anchor" href="#setscreenmetrics-width-height"><span>setScreenMetrics(width, height)</span></a></h2><ul><li><code>width</code> {number} 屏幕宽度，单位像素</li><li><code>height</code> {number} 屏幕高度，单位像素</li></ul><p>设置脚本坐标点击所适合的屏幕宽高。如果脚本运行时，屏幕宽度不一致会自动放缩坐标。</p><p>例如在 1920*1080 的设备中，某个操作的代码为</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">setScreenMetrics</span><span class="token punctuation">(</span><span class="token number">1080</span><span class="token punctuation">,</span> <span class="token number">1920</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">longClick</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在其他设备上 AutoJs 会自动放缩坐标以便脚本仍然有效。例如在 540 * 960 的屏幕中<code>click(800, 200)</code>实际上会点击位置(400, 100)。</p><h1 id="automator" tabindex="-1"><a class="header-anchor" href="#automator"><span>automator</span></a></h1>`,10),u=s(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>该模块基于无障碍，只有 Android7.0 及以上才有效。<br> 为方便使用，全部函数均可全局使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>automator<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">click</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="automator-click-x-y" tabindex="-1"><a class="header-anchor" href="#automator-click-x-y"><span>automator.click(x, y)</span></a></h2><ul><li><code>x</code> {number} 要点击的坐标的 x 值</li><li><code>y</code> {number} 要点击的坐标的 y 值</li></ul><p>模拟点击坐标(x, y)，并返回是否点击成功。只有在点击执行完成后脚本才继续执行。</p><p>一般而言，只有点击过程(大约 150 毫秒)中被其他事件中断(例如用户自行点击)才会点击失败。</p><p>使用该函数模拟连续点击时可能有点击速度过慢的问题，这时可以用<code>press()</code>函数代替。</p><h2 id="automator-longclick-x-y" tabindex="-1"><a class="header-anchor" href="#automator-longclick-x-y"><span>automator.longClick(x, y)</span></a></h2><ul><li><code>x</code> {number} 要长按的坐标的 x 值</li><li><code>y</code> {number} 要长按的坐标的 y 值</li></ul><p>模拟长按坐标(x, y), 并返回是否成功。只有在长按执行完成（大约 600 毫秒）时脚本才会继续执行。</p><p>一般而言，只有长按过程中被其他事件中断(例如用户自行点击)才会长按失败。</p><h2 id="automator-press-x-y-duration" tabindex="-1"><a class="header-anchor" href="#automator-press-x-y-duration"><span>automator.press(x, y, duration)</span></a></h2><ul><li><code>x</code> {number} 要按住的坐标的 x 值</li><li><code>y</code> {number} 要按住的坐标的 y 值</li><li><code>duration</code> {number} 按住时长，单位毫秒</li></ul><p>模拟按住坐标(x, y), 并返回是否成功。只有按住操作执行完成时脚本才会继续执行。</p><p>如果按住时间过短，那么会被系统认为是点击；如果时长超过 500 毫秒，则认为是长按。</p><p>一般而言，只有按住过程中被其他事件中断才会操作失败。</p><p>一个连点器的例子如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//循环100次</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//点击位置(500, 1000), 每次用时1毫秒</span>
  <span class="token function">press</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="automator-swipe-x1-y1-x2-y2-duration" tabindex="-1"><a class="header-anchor" href="#automator-swipe-x1-y1-x2-y2-duration"><span>automator.swipe(x1, y1, x2, y2, duration)</span></a></h2><ul><li><code>x1</code> {number} 滑动的起始坐标的 x 值</li><li><code>y1</code> {number} 滑动的起始坐标的 y 值</li><li><code>x2</code> {number} 滑动的结束坐标的 x 值</li><li><code>y2</code> {number} 滑动的结束坐标的 y 值</li><li><code>duration</code> {number} 滑动时长，单位毫秒</li></ul><p>模拟从坐标(x1, y1)滑动到坐标(x2, y2)，并返回是否成功。只有滑动操作执行完成时脚本才会继续执行。</p><p>一般而言，只有滑动过程中被其他事件中断才会滑动失败。</p><h2 id="automator-gesture-duration-arr" tabindex="-1"><a class="header-anchor" href="#automator-gesture-duration-arr"><span>automator.gesture(duration, ...arr)</span></a></h2><ul><li><code>duration</code> {number} 手势的时长</li><li><code>arr</code> {number[]} 经过的坐标点，每个坐标点由 <code>[x, y]</code> 组成,至少要两个</li></ul><p>模拟手势操作。</p><p>示例：模拟一个从(0, 0)到(500, 500)到(500, 100)的手势操作，时长为 2 秒。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">gesture</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="automator-gestures-arr" tabindex="-1"><a class="header-anchor" href="#automator-gestures-arr"><span>automator.gestures(...arr)</span></a></h2><ul><li><code>arr</code> {Array} 手势，参数有 ：[delay, duration, ...points] <ul><li><code>delay</code>{number} 延迟,默认 0,单位毫秒</li><li><code>duration</code>{number} 滑动时长，单位毫秒</li><li><code>points</code> {number[]} 经过的坐标点，每个坐标点由 <code>[x, y]</code> 组成，至少要两个</li></ul></li></ul><p>同时模拟多个手势。</p><p>例如手指捏合：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">gestures</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="rootautomator" tabindex="-1"><a class="header-anchor" href="#rootautomator"><span>RootAutomator</span></a></h1>`,32),l=s(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>RootAutomator 是一个使用 root 权限来模拟触摸的对象，用它可以完成触摸与多点触摸，并且这些动作的执行没有延迟。<br> 一个脚本中最好只存在一个 RootAutomator，并且保证脚本结束退出他。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootAutomator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ra<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//执行一些点击操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="rootautomator-tap-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-tap-x-y-id"><span>RootAutomator.tap(x, y[, id])</span></a></h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1，可以通过 setDefaultId 指定。</li></ul><p>点击位置(x, y)。其中 id 是一个整数值，用于区分多点触摸，不同的 id 表示不同的&quot;手指&quot;，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ra <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootAutomator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//让&quot;手指1&quot;点击位置(100, 100)</span>
ra<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//让&quot;手指2&quot;点击位置(200, 200);</span>
ra<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ra<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要多点触摸，则不需要 id 这个参数。 多点触摸通常用于手势或游戏操作，例如模拟双指捏合、双指上滑等。</p><p>某些情况下可能存在 tap 点击无反应的情况，这时可以用<code>RootAutomator.press()</code>函数代替。</p><h2 id="rootautomator-swipe-x1-x2-y1-y2-duration-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-swipe-x1-x2-y1-y2-duration-id"><span>RootAutomator.swipe(x1, x2, y1, y2[, duration, id])</span></a></h2><ul><li><code>x1</code> {number} 滑动起点横坐标</li><li><code>y1</code> {number} 滑动起点纵坐标</li><li><code>x2</code> {number} 滑动终点横坐标</li><li><code>y2</code> {number} 滑动终点纵坐标</li><li><code>duration</code> {number} 滑动时长，单位毫秒，默认值为 300</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟一次从(x1, y1)到(x2, y2)的时间为 duration 毫秒的滑动。</p><h2 id="rootautomator-press-x-y-duration-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-press-x-y-duration-id"><span>RootAutomator.press(x, y, duration[, id])</span></a></h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>duration</code> {number} 按下时长</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟按下位置(x, y)，时长为 duration 毫秒。</p><h2 id="rootautomator-longpress-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-longpress-x-y-id"><span>RootAutomator.longPress(x, y[, id])</span></a></h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>duration</code> {number} 按下时长</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟长按位置(x, y)。</p><p>以上为简单模拟触摸操作的函数。如果要模拟一些复杂的手势，需要更底层的函数。</p><h2 id="rootautomator-touchdown-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-touchdown-x-y-id"><span>RootAutomator.touchDown(x, y[, id])</span></a></h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟手指按下位置(x, y)。</p><h2 id="rootautomator-touchmove-x-y-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-touchmove-x-y-id"><span>RootAutomator.touchMove(x, y[, id])</span></a></h2><ul><li><code>x</code> {number} 横坐标</li><li><code>y</code> {number} 纵坐标</li><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟移动手指到位置(x, y)。</p><h2 id="rootautomator-touchup-id" tabindex="-1"><a class="header-anchor" href="#rootautomator-touchup-id"><span>RootAutomator.touchUp([id])</span></a></h2><ul><li><code>id</code> {number} 多点触摸 id，可选，默认为 1</li></ul><p>模拟手指弹起。</p><h1 id="使用-root-权限点击和滑动的简单命令" tabindex="-1"><a class="header-anchor" href="#使用-root-权限点击和滑动的简单命令"><span>使用 root 权限点击和滑动的简单命令</span></a></h1>`,27),r=s(`<div class="hint-container warning"><p class="hint-container-title">注意</p><p>注意：本章节的函数在后续版本很可能有改动！请勿过分依赖本章节函数。推荐使用<code>RootAutomator</code>代替。</p></div><ul><li>这些函数通常首字母大写以表示其特殊的权限。</li><li>这些函数均不返回任何值。</li><li>并且，这些函数的执行是异步的、非阻塞的，在不同机型上所用的时间不同。脚本不会等待动作执行完成才继续执行。因此最好在每个函数之后加上适当的 sleep 来达到期望的效果。</li></ul><p>例如:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">Tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，动作的执行可能无法被停止，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码执行后可能会出现在任务管理中停止脚本后点击仍然继续的情况。 因此，强烈建议在每个动作后加上延时：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">Tap</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tap-x-y" tabindex="-1"><a class="header-anchor" href="#tap-x-y"><span>Tap(x, y)</span></a></h2><ul><li><code>x</code>, <code>y</code> {number} 要点击的坐标。</li></ul><p>点击位置(x, y), 您可以通过&quot;开发者选项&quot;开启指针位置来确定点击坐标。</p><h2 id="swipe-x1-y1-x2-y2-duration" tabindex="-1"><a class="header-anchor" href="#swipe-x1-y1-x2-y2-duration"><span>Swipe(x1, y1, x2, y2, [duration])</span></a></h2><ul><li><code>x1</code>, <code>y1</code> {number} 滑动起点的坐标</li><li><code>x2</code>, <code>y2</code> {number} 滑动终点的坐标</li><li><code>duration</code> {number} 滑动动作所用的时间</li></ul><p>滑动。从(x1, y1)位置滑动到(x2, y2)位置。</p>`,14);function d(k,m){const n=o("Badge");return e(),p("div",null,[i,a(n,{type:"tip",text:"稳定",vertical:"middle"}),a(n,{type:"tip",text:"Android 7+",vertical:"middle"}),a(n,{type:"tip",text:"Accessibility",vertical:"middle"}),a(n,{type:"tip",text:"global",vertical:"middle"}),u,a(n,{type:"tip",text:"稳定",vertical:"middle"}),a(n,{type:"tip",text:"Root",vertical:"middle"}),l,a(n,{type:"warning",text:"实验",vertical:"middle"}),a(n,{type:"warning",text:"Root",vertical:"middle"}),r])}const b=t(c,[["render",d],["__file","coordinatesBasedAutomation.html.vue"]]),h=JSON.parse('{"path":"/coordinatesBasedAutomation.html","title":"automator","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"setScreenMetrics(width, height)","slug":"setscreenmetrics-width-height","link":"#setscreenmetrics-width-height","children":[]},{"level":2,"title":"automator.click(x, y)","slug":"automator-click-x-y","link":"#automator-click-x-y","children":[]},{"level":2,"title":"automator.longClick(x, y)","slug":"automator-longclick-x-y","link":"#automator-longclick-x-y","children":[]},{"level":2,"title":"automator.press(x, y, duration)","slug":"automator-press-x-y-duration","link":"#automator-press-x-y-duration","children":[]},{"level":2,"title":"automator.swipe(x1, y1, x2, y2, duration)","slug":"automator-swipe-x1-y1-x2-y2-duration","link":"#automator-swipe-x1-y1-x2-y2-duration","children":[]},{"level":2,"title":"automator.gesture(duration, ...arr)","slug":"automator-gesture-duration-arr","link":"#automator-gesture-duration-arr","children":[]},{"level":2,"title":"automator.gestures(...arr)","slug":"automator-gestures-arr","link":"#automator-gestures-arr","children":[]},{"level":2,"title":"RootAutomator.tap(x, y[, id])","slug":"rootautomator-tap-x-y-id","link":"#rootautomator-tap-x-y-id","children":[]},{"level":2,"title":"RootAutomator.swipe(x1, x2, y1, y2[, duration, id])","slug":"rootautomator-swipe-x1-x2-y1-y2-duration-id","link":"#rootautomator-swipe-x1-x2-y1-y2-duration-id","children":[]},{"level":2,"title":"RootAutomator.press(x, y, duration[, id])","slug":"rootautomator-press-x-y-duration-id","link":"#rootautomator-press-x-y-duration-id","children":[]},{"level":2,"title":"RootAutomator.longPress(x, y[, id])","slug":"rootautomator-longpress-x-y-id","link":"#rootautomator-longpress-x-y-id","children":[]},{"level":2,"title":"RootAutomator.touchDown(x, y[, id])","slug":"rootautomator-touchdown-x-y-id","link":"#rootautomator-touchdown-x-y-id","children":[]},{"level":2,"title":"RootAutomator.touchMove(x, y[, id])","slug":"rootautomator-touchmove-x-y-id","link":"#rootautomator-touchmove-x-y-id","children":[]},{"level":2,"title":"RootAutomator.touchUp([id])","slug":"rootautomator-touchup-id","link":"#rootautomator-touchup-id","children":[]},{"level":2,"title":"Tap(x, y)","slug":"tap-x-y","link":"#tap-x-y","children":[]},{"level":2,"title":"Swipe(x1, y1, x2, y2, [duration])","slug":"swipe-x1-y1-x2-y2-duration","link":"#swipe-x1-y1-x2-y2-duration","children":[]}],"git":{"updatedTime":1713353570000,"contributors":[{"name":"Lin","email":"yditmxpev@mozmail.com","commits":3}]},"filePathRelative":"coordinatesBasedAutomation.md"}');export{b as comp,h as data};
